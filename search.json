[{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://diazcastillo.github.io/MCWtests/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"introduction-to-mcw-testing","dir":"Articles","previous_headings":"","what":"1. Introduction to MCW testing","title":"MCWtests","text":"Originally, Monte Carlo-Wilcoxon (MCW) tests designed determined whether differences two sets data significantly biased direction compared expected chance. MCW tests proceed calculating sum--ranks-based bias indexes, hence reference Frank Wilcoxon invented non-parametric rank-sum signed-rank tests, rearranging dataset multiple times, hence Monte Carlo reference often associated analytical strategies based repeated random sampling1–5. MCWtests package encompasses original MCW test three variations differ data structures specific questions interrogate. matched-measures univariate MCW (muMCW) test, original MCW test1–5, assesses whether one set inherently matched-paired measures significantly biased direction. instance, muMCW tests can used analyze bodyweights transcript abundances determined two different timepoints set mice. unmatched-measures MCW (uMCW) test assesses whether two sets unmatched measures heterogeneity significantly biased direction. instance, uMCW tests can used analyze bodyweights transcript abundances determined two sets mice maintained different conditions. matched-measures bivariate MCW (mbMCW) test assesses whether two sets inherently matched-paired measures significantly differentially biased direction. instance, mbMCW tests can used analyze bodyweights transcript abundances determined two different timepoints two sets mice exposed different conditions. bias-measures MCW (bMCW) test assesses whether set measures bias quantitative trait two conditions subset bias measures significantly biased direction. instance, bMCW tests can used analyze bias indexes obtained using MCW tests fold change transcript abundances spanning entire transcriptome genes located specific genomic regions two sets mice exposed different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mcw-testing-process","dir":"Articles","previous_headings":"","what":"2. MCW testing process","title":"MCWtests","text":"Although MCW test examines distinct data structures address slightly different questions, MCW tests share two fundamental steps: quantitatively determine extent direction bias measure analysis, MCW tests calculate bias index (BI) summing ranks dividing sums maximum possible value sums. Consequently, BIs range 1 -1 measure analysis completely biased possible direction. determine significance BIs calculated user-provided dataset (observed BIs), collection expected--chance BIs generated rearranging original dataset multiple times calculating BIs iteration. Pupper Plower values calculated fractions expected--chance BIs values higher equal lower equal observed BIs, respectively. MCW test employs user-provided parameter max_rearrangements follow two alternative paths.","code":"-   **MCW exact tests.** If the number of distinct rearrangements that can be generated from the dataset under analysis is less than *max_rearrangements*, MCW tests will actually generate all possible data rearrangements to create the collection of expected-by-chance BIs. In this case, *P~upper~* and *P~lower~* values will be exact estimations of the likelihood of obtaining BIs with equal or more extreme values compared to observed BIs with datasets of the same size and range but different internal structures.  -   **MCW approximated tests.** If the number of distinct rearrangements that can be generated from the dataset under analysis is greater than *max_rearrangements*, MCW tests will perform a specified number of random data rearrangements, equal to the value of *max_rearrangements*, to generate the collection of expected-by-chance BIs. In this case, *P~upper~* and *P~lower~* values will represent approximate estimations of the likelihood of obtaining BIs with equal or more extreme values compared to observed BIs with datasets of the same size and range but different internal structures."},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mcwtests-data-and-function-structure","dir":"Articles","previous_headings":"","what":"3. MCWtests data and function structure","title":"MCWtests","text":"MCW test involves two local files, one exported function users interacts , several internal functions perform specific tasks. Local files: Entry CSV dataset. Users provide data MCW testing CSV file directory choice. file can contain data single MCW test multiple MCW tests executed simultaneously. Users can organize entry dataset two different layouts, vertical horizontal, particularly useful simultaneous testing data structures individual test significantly different similar, respectively. Results CSV table. MCW test functions create CSV file results MCW testing, similar name entry CSV dataset file, directory entry CSV located. Exported functions: MCWtest function: executing function, users must specify path CSV file containing entry dataset parameter max_rearrangements. MCWtest function interprets parameter maximum number data rearrangement iterations used define size collection expected--chance BIs. MCWtest function performs following tasks: loads entry CSV dataset. determines whether MCW tests proceed using exact approximated testing paths. calls corresponding functions, MCW_exact_test MCW_approximated_test, run exact approximated tests, resepctively. writes results MCW testing CSV file directory entry CSV file. Internal functions: MCW_exact_test function: function called number distinctive data rearrangements less user-provided parameter max_rearrangements. MCW_exact_test function performs following tasks: generates distinctive data rearrangements, either executing MCW_exact_test_combinations function. calculates BIs user-provided data distinctive rearrangements dataset. calculates Pupper Plower values fractions expected--chance BIs values higher equal lower equal observed BIs, respectively. returns MCW exact testing results MCWtest function. MCW_exact_test_combinations function: function called assist MCW_exact_test function generating distinctive data rearrangements. MCW_approximated_test function: function called number distinctive data rearrangements greater user-provided parameter max_rearrangements. MCW_approximated_test function performs following tasks: calls MCW_approximated_test_observed_BIs function calculate BIs user-provided dataset. calls MCW_approximated_test_simulated_BIs function randomly rearrange data calculate expected--chance BIs specified number times, equal max_rearrangements. calculates Pupper Plower values fractions expected--chance BIs values higher equal lower equal observed BIs, respectively. returns MCW approximated testing results MCWtest function MCW_approximated_test_observed_BIs function: function called calculate BIs user-provided dataset. MCW_approximated_test_simulated_BIs function: function called N times, N = max_rearrangements, randomly rearrange data calculate expected--chance BIs using MCW_approximated_test_observed_BIs function.","code":""},{"path":[]},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"introduction","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.1 unmatched-measures MCW (uMCW) test","what":"Introduction","title":"MCWtests","text":"uMCW test actually combination two different tests assess whether two sets unmatched measures heterogeneity significantly biased direction. Significantly different data heterogeneities two conditions indicate measure analysis constrained relaxed one conditions, potentially providing insights mechanisms underlying variation measure. instance, uMCW tests can used analyze bodyweights transcript abundances determined two sets mice maintained different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"umcw-testing-entry-dataset-formatting","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.1 unmatched-measures MCW (uMCW) test","what":"uMCW testing entry dataset formatting","title":"MCWtests","text":"executing uMCWtest function, users must provide path local CSV file named X_uMCWtest_data.csv, X serves user-defined identifier. X_uMCWtest_data.csv can structured two distinct formats: Vertical layout: format allows appending datasets varying structures, different numbers measures per set appended test. Vertical entry datasets include following columns: condition column uniquely identifies two measure sets analysis. value column contains actual measures analysis. many informative columns needed users contextualize results test. names columns include terms condition value. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Horizontal layout: format allows appending datasets similar structures, number measures collected two conditions. Horizontal entry datasets include following columns: Columns condition_a condition_b uniquely identify two measure sets analysis. Columns .b.j, j represent integers differentiate specific measures within set, contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain term condition structure .b.j columns. columns optional running single test, least one column required running multiple tests simultaneously.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"umcw-testing-process","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.1 unmatched-measures MCW (uMCW) test","what":"uMCW testing process","title":"MCWtests","text":"function uMCWtest eliminate missing values (NAs) dataset proceeding steps. estimate bias two sets measures (e.g., b), function uMCWtest performs tasks: generates possible disjoint data pairs using measures sets. measure pair, subtracts second measure pair first measure pair. ranks absolute values non-zero measure pair differences lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, tied measure pair differences assigned lowest rank possible. assigns measure pair rank sign based sign corresponding measure pair difference. sums signed ranks measure pairs formed measures two different sets (e.g., -b b-). type disjoint set measure pairs (e.g., -b b-), calculates uMCW_BI dividing sum signed ranks maximum number sum corresponding measure pairs highest possible positive ranks. Consequently, uMCW_BI ranges 1 values measures first set higher values measures second set, -1 values measures first set lower values measures second set. estimate bias heterogeneity two sets measures, function uMCWtest performs tasks: generates possible disjoint data pairs within set, disregarding order paired measures. instance, measure pair .1-.2 considered equivalent measure pair .2-.1, former retained subsequent calculations. measure pair, subtracts second measure first measure. ranks measure pair differences non-zero values lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, uMCWtest assigns tied measure pair differences lowest rank possible. sums ranks measure pairs formed measures set (e.g., -b-b). type -set measure pairs (e.g., -b-b), divides sum signed ranks maximum number sum corresponding measure pairs highest possible ranks. calculates two heterogeneity bias indexes (uMCW_HBIs) subtracting normalized sum signed ranks previous step two possible directions (e.g., -b b-). Consequently, uMCW_HBI ranges 1 least two measures first set distinct values measures second set value, -1 measures first set value least two measures second set distinct values. assess significance uMCW_BIs uMCW_HBIs obtained user-provided data (observed uMCW_BIs uMCW_HBIs), function uMCWtest performs tasks: generates collection expected--chance uMCW_BIs uMCW_HBIs. expected values obtained rearranging measures two sets multiple times. user-provided parameter max_rearrangements determines two paths function uMCWtest can follow generate collection expected--chance uMCW_BIs uMCW_HBIs: uMCW exact testing: number distinct measure rearrangements can alter initial set distribution less max_rearrangements, function uMCWtest calculates uMCW_BIs uMCW_HBIs possible data rearrangements. uMCW approximated testing: number distinct measure rearrangements can alter initial set distribution greater max_rearrangements, function uMCWtest perform N = max_rearrangements random measure rearrangements calculate collection expected--chance uMCW_BIs uMCW_HBIs. calculates Pupper Plower values fraction expected--chance uMCW_BIs uMCW_HBIs higher equal lower equal observed uMCW_BIs uMCW_HBIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"umcw-testing-results","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.1 unmatched-measures MCW (uMCW) test","what":"uMCW testing results","title":"MCWtests","text":"uMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_uMCWtest_results.csv, X user-defined identifier entry dataset CSV file. X_uMCWtest_results.csv file contains four rows uMCWtest, two uMCW_BIs calculated condition contrast (e.g., -b b-), two uMCW_HBIs calculated condition contrast. X_uMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Columns condition_a condition_b indicate two measure sets analysis. Columns N, n_a n_b indicate total number measures number measures belonging set removing missing values (NAs). Column test_type distinguishes exact approximated tests. Column BI_type indicates bias index type (uMCW_BI uMCW_HBI) row results. Column condition_contrast indicates set contrast (e.g., -b b-) row results. Column observed_BI contains values uMCW_BIs uMCW_HBIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance uMCW_BIs uMCW_HBIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent Pupper Plower values, respectively. denote fraction expected--chance uMCW_BIs uMCW_HBIs values higher equal lower equal observed uMCW_BIs uMCW_HBIs, respectively.","code":""},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"umcw-testing-of-multiple-datasets-organized-vertically","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.1 unmatched-measures MCW (uMCW) test > Examples","what":"uMCW testing of multiple datasets organized vertically","title":"MCWtests","text":"example uMCW testing entry dataset vertical layout showcases data three ideal tests (Table 1). Contrast test includes data two sets measures randomly selected range (Figure 1). Contrast II test includes data representing two sets measures randomly selected two different ranges, measures second set generally higher first set (Figure 1). Contrast III test includes data representing two sets measures randomly selected two different ranges, measures second set generally higher less heterogeneous first set (Figure 1). results uMCW tests align intended structure entry datasets (Table 2).","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-1--umcw-testing-entry-dataset-with-vertical-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast condition value       <char>    <char> <int>  1:        I      AAAA    63  2:        I      AAAA    22  3:        I      AAAA    87  4:        I      AAAA    34  5:        I      AAAA    27  6:        I      BBBB    32  7:        I      BBBB    10  8:        I      BBBB    74  9:        I      BBBB    31 10:        I      BBBB    76 11:       II      AAAA    51 12:       II      AAAA     5 13:       II      AAAA    25 14:       II      AAAA     4 15:       II      AAAA    38 16:       II      BBBB    68 17:       II      BBBB    98 18:       II      BBBB    41 19:       II      BBBB   100 20:       II      BBBB    67 21:      III      AAAA    46 22:      III      AAAA    14 23:      III      AAAA    35 24:      III      AAAA    11 25:      III      AAAA    36 26:      III      BBBB    56 27:      III      BBBB    51 28:      III      BBBB    50 29:      III      BBBB    51 30:      III      BBBB    60     contrast condition value"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-2--results-of-umcw-testing-using-an-entry-dataset-with-vertical-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast condition_a condition_b     N   n_a   n_b    test_type  BI_type       <char>      <char>      <char> <int> <int> <int>       <char>   <char>  1:        I        AAAA        BBBB    10     5     5 approximated  uMCW_BI  2:        I        AAAA        BBBB    10     5     5 approximated  uMCW_BI  3:        I        AAAA        BBBB    10     5     5 approximated uMCW_HBI  4:        I        AAAA        BBBB    10     5     5 approximated uMCW_HBI  5:       II        AAAA        BBBB    10     5     5 approximated  uMCW_BI  6:       II        AAAA        BBBB    10     5     5 approximated  uMCW_BI  7:       II        AAAA        BBBB    10     5     5 approximated uMCW_HBI  8:       II        AAAA        BBBB    10     5     5 approximated uMCW_HBI  9:      III        AAAA        BBBB    10     5     5 approximated  uMCW_BI 10:      III        AAAA        BBBB    10     5     5 approximated  uMCW_BI 11:      III        AAAA        BBBB    10     5     5 approximated uMCW_HBI 12:      III        AAAA        BBBB    10     5     5 approximated uMCW_HBI     condition_contrast observed_BI expected_by_chance_BI_N pupper plower                 <char>       <num>                   <int>  <num>  <num>  1:          AAAA-BBBB  0.03948718                     200  0.430  0.595  2:          BBBB-AAAA -0.03948718                     200  0.595  0.430  3:          AAAA-BBBB -0.02857143                     200  0.500  0.505  4:          BBBB-AAAA  0.02857143                     200  0.505  0.500  5:          AAAA-BBBB -0.69794872                     200  1.000  0.005  6:          BBBB-AAAA  0.69794872                     200  0.005  1.000  7:          AAAA-BBBB -0.07766990                     200  0.720  0.285  8:          BBBB-AAAA  0.07766990                     200  0.285  0.720  9:          AAAA-BBBB -0.68358974                     200  1.000  0.000 10:          BBBB-AAAA  0.68358974                     200  0.000  1.000 11:          AAAA-BBBB  0.39130435                     200  0.040  0.970 12:          BBBB-AAAA -0.39130435                     200  0.970  0.040"},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"umcw-testing-of-multiple-datasets-organized-horizontally","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.1 unmatched-measures MCW (uMCW) test > Examples","what":"uMCW testing of multiple datasets organized horizontally","title":"MCWtests","text":"example uMCW testing entry dataset horizontal layout showcases data nine ideal tests (Table 3). includes two types informative columns accommodate cases users might want perform multiple tests nested structure. columns contrast prefix provide contextual information groups tests rows, columns element prefix provide contextual information test row. Contrast row includes two sets measures randomly selected range (Figure 2). Contrast II row includes two sets measures randomly selected two different ranges, measures second set generally higher first set (Figure 2). Contrast III row includes two sets measures randomly selected two different ranges, measures second set generally higher less heterogeneous first set (Figure 1). results uMCW tests align intended structure entry datasets (Table 4).","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-3--umcw-testing-entry-dataset-with-horizontal-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait element_ID element_chr element_start element_end      <char>         <char>     <char>       <int>         <int>       <int> 1:        I        trait_a         x1           1          1000        2000 2:        I        trait_a         x2           1          5000        5500 3:        I        trait_a         x3           1         90000      100000 4:       II        trait_b         x1           1          1000        2000 5:       II        trait_b         x2           1          5000        5500 6:       II        trait_b         x3           1         90000      100000 7:      III        trait_b         x1           1          1000        2000 8:      III        trait_b         x2           1          5000        5500 9:      III        trait_b         x3           1         90000      100000    condition_a condition_b   a.1   a.2   a.3   a.4   a.5   b.1   b.2   b.3         <char>      <char> <int> <int> <int> <int> <int> <int> <int> <int> 1:        AAAA        BBBB    91    56    65    63    23    17    NA    50 2:        AAAA        BBBB    96    45    42    29    12    25    36    28 3:        AAAA        BBBB    77    98    31    93    34    34    97    77 4:        AAAA        BBBB    54    23    59    28    52    90    92    91 5:        AAAA        BBBB    37     5    18    26    11    48    84    62 6:        AAAA        BBBB    28    35    43    13     6    60    71    77 7:        AAAA        BBBB    20    32    14     3     6    46    56    45 8:        AAAA        BBBB    50    38    28    47    27    55    46    51 9:        AAAA        BBBB    31    36     2    37    47    54    48    48      b.4   b.5    <int> <int> 1:    39    30 2:    79    82 3:    53    11 4:    50    68 5:    86    53 6:    89    97 7:    57    50 8:    46    60 9:    46    48"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-4--results-of-umcw-testing-using-an-entry-dataset-with-horizontal-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait element_ID element_chr element_start element_end       <char>         <char>     <char>       <int>         <int>       <int>  1:        I        trait_a         x1           1          1000        2000  2:        I        trait_a         x1           1          1000        2000  3:        I        trait_a         x1           1          1000        2000  4:        I        trait_a         x1           1          1000        2000  5:        I        trait_a         x2           1          5000        5500  6:        I        trait_a         x2           1          5000        5500  7:        I        trait_a         x2           1          5000        5500  8:        I        trait_a         x2           1          5000        5500  9:        I        trait_a         x3           1         90000      100000 10:        I        trait_a         x3           1         90000      100000 11:        I        trait_a         x3           1         90000      100000 12:        I        trait_a         x3           1         90000      100000 13:       II        trait_b         x1           1          1000        2000 14:       II        trait_b         x1           1          1000        2000 15:       II        trait_b         x1           1          1000        2000 16:       II        trait_b         x1           1          1000        2000 17:       II        trait_b         x2           1          5000        5500 18:       II        trait_b         x2           1          5000        5500 19:       II        trait_b         x2           1          5000        5500 20:       II        trait_b         x2           1          5000        5500 21:       II        trait_b         x3           1         90000      100000 22:       II        trait_b         x3           1         90000      100000 23:       II        trait_b         x3           1         90000      100000 24:       II        trait_b         x3           1         90000      100000 25:      III        trait_b         x1           1          1000        2000 26:      III        trait_b         x1           1          1000        2000 27:      III        trait_b         x1           1          1000        2000 28:      III        trait_b         x1           1          1000        2000 29:      III        trait_b         x2           1          5000        5500 30:      III        trait_b         x2           1          5000        5500 31:      III        trait_b         x2           1          5000        5500 32:      III        trait_b         x2           1          5000        5500 33:      III        trait_b         x3           1         90000      100000 34:      III        trait_b         x3           1         90000      100000 35:      III        trait_b         x3           1         90000      100000 36:      III        trait_b         x3           1         90000      100000     contrast contrast_trait element_ID element_chr element_start element_end     condition_a condition_b     N   n_a   n_b    test_type  BI_type          <char>      <char> <int> <int> <int>       <char>   <char>  1:        AAAA        BBBB     9     5     4        exact  uMCW_BI  2:        AAAA        BBBB     9     5     4        exact uMCW_HBI  3:        AAAA        BBBB     9     5     4        exact  uMCW_BI  4:        AAAA        BBBB     9     5     4        exact uMCW_HBI  5:        AAAA        BBBB    10     5     5 approximated  uMCW_BI  6:        AAAA        BBBB    10     5     5 approximated  uMCW_BI  7:        AAAA        BBBB    10     5     5 approximated uMCW_HBI  8:        AAAA        BBBB    10     5     5 approximated uMCW_HBI  9:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 10:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 11:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 12:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 13:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 14:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 15:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 16:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 17:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 18:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 19:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 20:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 21:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 22:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 23:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 24:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 25:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 26:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 27:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 28:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 29:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 30:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 31:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 32:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 33:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 34:        AAAA        BBBB    10     5     5 approximated  uMCW_BI 35:        AAAA        BBBB    10     5     5 approximated uMCW_HBI 36:        AAAA        BBBB    10     5     5 approximated uMCW_HBI     condition_a condition_b     N   n_a   n_b    test_type  BI_type     condition_contrast  observed_BI expected_by_chance_BI_N     pupper                 <char>        <num>                   <int>      <num>  1:          AAAA-BBBB  0.500800000                     126 0.06349206  2:          AAAA-BBBB  0.402985075                     126 0.25396825  3:          BBBB-AAAA -0.500800000                     126 0.94444444  4:          BBBB-AAAA -0.402985075                     126 0.76984127  5:          AAAA-BBBB -0.066153846                     200 0.58000000  6:          BBBB-AAAA  0.066153846                     200 0.42500000  7:          AAAA-BBBB  0.064039409                     200 0.41000000  8:          BBBB-AAAA -0.064039409                     200 0.59500000  9:          AAAA-BBBB  0.161538462                     200 0.31500000 10:          BBBB-AAAA -0.161538462                     200 0.70500000 11:          AAAA-BBBB -0.043062201                     200 0.54500000 12:          BBBB-AAAA  0.043062201                     200 0.47000000 13:          AAAA-BBBB -0.649743590                     200 0.98000000 14:          BBBB-AAAA  0.649743590                     200 0.02000000 15:          AAAA-BBBB  0.024390244                     200 0.46500000 16:          BBBB-AAAA -0.024390244                     200 0.53500000 17:          AAAA-BBBB -0.778974359                     200 1.00000000 18:          BBBB-AAAA  0.778974359                     200 0.00500000 19:          AAAA-BBBB -0.123809524                     200 0.85500000 20:          BBBB-AAAA  0.123809524                     200 0.15500000 21:          AAAA-BBBB -0.801538462                     200 1.00000000 22:          BBBB-AAAA  0.801538462                     200 0.01000000 23:          AAAA-BBBB  0.009803922                     200 0.46500000 24:          BBBB-AAAA -0.009803922                     200 0.54500000 25:          AAAA-BBBB -0.807692308                     200 1.00000000 26:          BBBB-AAAA  0.807692308                     200 0.00000000 27:          AAAA-BBBB  0.303921569                     200 0.00000000 28:          BBBB-AAAA -0.303921569                     200 1.00000000 29:          AAAA-BBBB -0.558461538                     200 0.98500000 30:          BBBB-AAAA  0.558461538                     200 0.01500000 31:          AAAA-BBBB  0.288888889                     200 0.07000000 32:          BBBB-AAAA -0.288888889                     200 0.93000000 33:          AAAA-BBBB -0.576923077                     200 0.99000000 34:          BBBB-AAAA  0.576923077                     200 0.01500000 35:          AAAA-BBBB  0.527777778                     200 0.01500000 36:          BBBB-AAAA -0.527777778                     200 0.99000000     condition_contrast  observed_BI expected_by_chance_BI_N     pupper         plower          <num>  1: 0.94444444  2: 0.76984127  3: 0.06349206  4: 0.25396825  5: 0.42500000  6: 0.58000000  7: 0.59500000  8: 0.41000000  9: 0.70500000 10: 0.31500000 11: 0.47000000 12: 0.54500000 13: 0.02000000 14: 0.98000000 15: 0.53500000 16: 0.46500000 17: 0.00500000 18: 1.00000000 19: 0.15500000 20: 0.85500000 21: 0.01000000 22: 1.00000000 23: 0.54500000 24: 0.46500000 25: 0.00000000 26: 1.00000000 27: 1.00000000 28: 0.00000000 29: 0.01500000 30: 0.98500000 31: 0.93000000 32: 0.07000000 33: 0.01500000 34: 0.99000000 35: 0.99000000 36: 0.01500000         plower"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"introduction-1","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.2 matched-measures univariate MCW (muMCW) test","what":"Introduction","title":"MCWtests","text":"muMCW test assesses whether one set inherently matched-paired measures significantly biased direction. instance, muMCW tests can used analyze bodyweights transcript abundances determined two different timepoints set mice.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mumcw-testing-entry-dataset-formatting","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.2 matched-measures univariate MCW (muMCW) test","what":"muMCW testing entry dataset formatting","title":"MCWtests","text":"executing muMCWtest function, users must provide path local CSV file named X_muMCWtest_data.csv, X serves user-defined identifier. X_muMCWtest_data.csv can structured two distinct formats: Vertical layout: format allows appending datasets varying structures, different numbers measure matched-pairs appended test. Vertical entry datasets include following columns: Columns condition_a condition_b uniquely identify two conditions matched-paired measures collected. Columns value_a value_b contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain terms condition value. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Horizontal layout: format allows appending datasets similar structures, number matched-paired measures appended test. Horizontal entry datasets include following columns: Columns condition_a condition_b uniquely identify two conditions matched-paired measures collected. Columns .b., represents integers differentiate specific matched-pairs measures, contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain term condition structure .b.columns. columns optional running single test, least one column required running multiple tests simultaneously.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mumcw-testing-process","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.2 matched-measures univariate MCW (muMCW) test","what":"muMCW testing process","title":"MCWtests","text":"function muMCWtest eliminates matched-paired measures least one missing value (NA) proceeding following steps. estimate bias matched-paired measures dataset, function muMCWtest performs following tasks: matched-pair measures, subtracts values two possible condition contrasts (e.g., -b b-). condition contrast, ranks absolute values non-zero differences lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, tied measure pair differences assigned lowest rank possible. assigns measure pair rank sign based sign corresponding measure pair difference. sums signed ranks condition contrast. calculates muMCW_BI dividing sum signed ranks maximum number sum corresponding measure pairs highest possible positive ranks. Consequently, muMCW_BI ranges 1 measures corresponding first condition higher measures corresponding second condition, -1 measures corresponding first condition lower measures corresponding second condition. assess significance muMCW_BIs obtained user-provided dataset (observed muMCW_BIs), function muMCWtest performs following tasks: generates collection expected--chance muMCW_BIs. expected values obtained rearranging measures within two conditions multiple times. user-provided parameter max_rearrangements determines two paths function muMCWtest can follow generate collection expected--chance muMCW_BIs: muMCW exact testing: number distinct measure rearrangements can alter initial pair set distribution less max_rearrangements, function muMCWtest calculates muMCW_BIs possible data rearrangements. muMCW approximated testing: number distinct measure rearrangements can alter initial pair set distribution greater max_rearrangements, function muMCWtest performs N = max_rearrangements random measure rearrangements calculate collection expected--chance muMCW_BIs. calculates Pupper Plower values fraction expected--chance muMCW_BIs higher equal lower equal observed muMCW_BIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mumcw-testing-results","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.2 matched-measures univariate MCW (muMCW) test","what":"muMCW testing results","title":"MCWtests","text":"muMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_muMCWtest_results.csv X user-defined identifier entry dataset CSV file. X_muMCWtest_results.csv file contains two rows muMCW test, muMCW_BIs calculated possible condition contrast (e.g., -b b-). X_muMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Columns condition_a condition_b indicate two conditions matched-paired measures provided. Column N indicates total number measure matched-pairs removing matched-pairs missing values (NAs). Column test_type distinguishes exact approximated tests. Column BI_type indicates muMCW_BI. Column condition_contrast indicates condition contrast row results. Column observed_BI contains value muMCW_BIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance muMCW_BIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent Pupper Plower values, respectively. denote fraction expected--chance muMCW_BIs values higher equal lower equal observed muMCW_BIs, respectively.","code":""},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mumcw-testing-of-multiple-datasets-organized-vertically","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.2 matched-measures univariate MCW (muMCW) test > Examples","what":"muMCW testing of multiple datasets organized vertically","title":"MCWtests","text":"example muMCW testing entry dataset vertical layout showcases data two ideal tests (Table 5). Contrast test includes data representing one set matched-paired measures randomly selected range (Figure 3). Contrast II test includes data representing one set matched-paired measures randomly selected two different ranges, measures second condition matched-pair generally higher measures first condition matched-pair (Figure 3). results muMCW tests align intended structure entry datasets (Table 6).","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-5--mumcw-testing-entry-dataset-with-vertical-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast condition_a condition_b value_a value_b       <char>      <char>      <char>   <int>   <int>  1:        I        AAAA        BBBB      19      35  2:        I        AAAA        BBBB      81      43  3:        I        AAAA        BBBB      43       2  4:        I        AAAA        BBBB      96      99  5:        I        AAAA        BBBB      33      69  6:        I        AAAA        BBBB      65      53  7:        I        AAAA        BBBB      96      43  8:        I        AAAA        BBBB      15      37  9:        I        AAAA        BBBB      92      82 10:        I        AAAA        BBBB      46      56 11:       II        AAAA        BBBB      25      52 12:       II        AAAA        BBBB       6      83 13:       II        AAAA        BBBB      56      66 14:       II        AAAA        BBBB      33      40 15:       II        AAAA        BBBB      28      47 16:       II        AAAA        BBBB      28      48 17:       II        AAAA        BBBB      19      67 18:       II        AAAA        BBBB      27      55 19:       II        AAAA        BBBB      47      45 20:       II        AAAA        BBBB      57      77     contrast condition_a condition_b value_a value_b"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-6--results-of-mumcw-testing-using-an-entry-dataset-with-vertical-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast condition_a condition_b     N    test_type  BI_type      <char>      <char>      <char> <int>       <char>   <char> 1:        I        AAAA        BBBB    10 approximated muMCW_BI 2:        I        AAAA        BBBB    10 approximated muMCW_BI 3:       II        AAAA        BBBB    10 approximated muMCW_BI 4:       II        AAAA        BBBB    10 approximated muMCW_BI    condition_contrast observed_BI expected_by_chance_BI_N pupper plower                <char>       <num>                   <int>  <num>  <num> 1:          AAAA-BBBB   0.2181818                     200  0.285  0.725 2:          BBBB-AAAA  -0.2181818                     200  0.725  0.285 3:          AAAA-BBBB  -0.9454545                     200  1.000  0.000 4:          BBBB-AAAA   0.9454545                     200  0.000  1.000"},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mumcw-testing-of-multiple-datasets-organized-horizontally","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.2 matched-measures univariate MCW (muMCW) test > Examples","what":"muMCW testing of multiple datasets organized horizontally","title":"MCWtests","text":"example muMCW testing entry dataset horizontal layout showcases data six ideal tests (Table 7). includes two types informative columns accommodate cases users might want perform multiple tests nested structure. columns contrast prefix provide contextual information groups tests rows, columns element prefix provide contextual information test row. Contrast row includes one set matched-paired measures randomly selected range (Figure 4). Contrast II row includes one set matched-paired measures randomly selected two different ranges, measures second condition matched-pair generally higher measures first condition matched-pair (Figure 4). results muMCW tests align intended structure entry datasets (Table 8).","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-7--mumcw-testing-entry-dataset-with-horizontal-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait element_ID element_chr element_start element_end      <char>         <char>     <char>       <int>         <int>       <int> 1:        I        trait_a         x1           1          1000        2000 2:        I        trait_a         x2           1          5000        5500 3:        I        trait_a         x3           1         90000      100000 4:       II        trait_b         x1           1          1000        2000 5:       II        trait_b         x2           1          5000        5500 6:       II        trait_b         x3           1         90000      100000    condition_a condition_b   a.1   a.2   a.3   a.4   a.5   b.1   b.2   b.3         <char>      <char> <int> <int> <int> <int> <int> <int> <int> <int> 1:        AAAA        BBBB    91    56    65    63    23    17    57    NA 2:        AAAA        BBBB    96    45    42    29    12    25    36    28 3:        AAAA        BBBB    77    98    31    93    34    34    97    77 4:        AAAA        BBBB    54    23    59    28    52    90    92    91 5:        AAAA        BBBB    37     5    18    26    11    48    84    62 6:        AAAA        BBBB    28    35    43    13     6    60    71    77      b.4   b.5    <int> <int> 1:    39    30 2:    79    82 3:    53    11 4:    50    68 5:    86    53 6:    89    97"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-8--results-of-mumcw-testing-using-an-entry-dataset-with-horizontal-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait element_ID element_chr element_start element_end       <char>         <char>     <char>       <int>         <int>       <int>  1:        I        trait_a         x1           1          1000        2000  2:        I        trait_a         x1           1          1000        2000  3:        I        trait_a         x2           1          5000        5500  4:        I        trait_a         x2           1          5000        5500  5:        I        trait_a         x3           1         90000      100000  6:        I        trait_a         x3           1         90000      100000  7:       II        trait_b         x1           1          1000        2000  8:       II        trait_b         x1           1          1000        2000  9:       II        trait_b         x2           1          5000        5500 10:       II        trait_b         x2           1          5000        5500 11:       II        trait_b         x3           1         90000      100000 12:       II        trait_b         x3           1         90000      100000     condition_a condition_b     N    test_type  BI_type condition_contrast          <char>      <char> <int>       <char>   <char>             <char>  1:        AAAA        BBBB     4        exact muMCW_BI          AAAA-BBBB  2:        AAAA        BBBB     4        exact muMCW_BI          BBBB-AAAA  3:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB  4:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA  5:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB  6:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA  7:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB  8:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA  9:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB 10:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA 11:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB 12:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA     observed_BI expected_by_chance_BI_N    pupper    plower           <num>                   <int>     <num>     <num>  1:  0.40000000                     105 0.7142857 0.6380952  2: -0.40000000                     105 0.6380952 0.7142857  3:  0.06666667                     200 0.4650000 0.6300000  4: -0.06666667                     200 0.6300000 0.4650000  5:  0.33333333                     200 0.3050000 0.7700000  6: -0.33333333                     200 0.7700000 0.3050000  7: -1.00000000                     200 1.0000000 0.0500000  8:  1.00000000                     200 0.0500000 1.0000000  9: -1.00000000                     200 1.0000000 0.0650000 10:  1.00000000                     200 0.0650000 1.0000000 11: -1.00000000                     200 1.0000000 0.0250000 12:  1.00000000                     200 0.0250000 1.0000000"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"introduction-2","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.3 matched-measures bivariate MCW (mbMCW) test","what":"Introduction","title":"MCWtests","text":"mbMCW test assesses whether two sets inherently matched-paired measures significantly differentially biased direction. instance, mbMCW tests can used analyze bodyweights transcript abundances determined two different timepoints two sets mice exposed different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mbmcw-testing-entry-dataset-formatting","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.3 matched-measures bivariate MCW (mbMCW) test","what":"mbMCW testing entry dataset formatting","title":"MCWtests","text":"executing mbMCWtest function, users must provide path local CSV file named X_mbMCWtest_data.csv, X serves user-defined identifier. X_mbMCWtest_data.csv can structured two distinct formats: Vertical layout: format allows appending datasets varying structures, different numbers matched-pairs per set appended test. Vertical entry datasets include following columns: Columns matched_condition_a matched_condition_b uniquely identify two conditions matched-paired measure collected. Column unmatched_condition uniquely identifies two sets matched-paired measures analysis. Columns value_a value_b contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain terms condition value. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Horizontal layout: format allows appending datasets similar structures, number matched-paired measures collected two conditions. Horizontal entry datasets include following columns: Columns matched_condition_a matched_condition_b uniquely identify two conditions matched-paired measure collected. Columns unmatched_condition_x unmatched_condition_y uniquely identify two different sets matched-paired measures analysis. Columns x.., y.., x.b.y.b., represents integers differentiate specific matched-pair measures, contain actual measures analysis. many informative columns needed users contextualize results test. name columns contain term condition structure x.., y.., x.b.y.b.columns. columns optional running single test, least one column required running multiple tests simultaneously.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mbmcw-testing-process","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.3 matched-measures bivariate MCW (mbMCW) test","what":"mbMCW testing process","title":"MCWtests","text":"function mbMCWtest eliminates matched-paired measures least one missing value (NA) proceeding following steps. estimate differential bias two sets matched-paired measures dataset, function mbMCWtest perfoms following tasks: matched-paired measure, subtracts values two possible matched condition contrasts (e.g., -b b-). matched condition contrast, ranks absolute values non-zero differences lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, tied measure pair differences assigned lowest rank possible. assigns measure pair rank sign based sign corresponding measure pair difference. set matched-paired measures (e.g., x y), sums signed ranks matched condition contrast (e.g., -b b-). set matched-paired measures (e.g., x y) matched condition contrast (e.g., -b b-), calculates one mbMCW_BI. value obtained dividing sum signed ranks maximum number sum corresponding measure pairs highest possible positive ranks. Consequently, mbMCW_BI ranges 1 values matched-pair measure differences set analysis highest positive values, -1 values matched-pair measure differences set analysis lowest negative values. assess significance mbMCW_BIs obtained user-provided dataset (observed mbMCW_BIs), function mbMCWtest perfoms following tasks: generates collection expected--chance mbMCW_BIs. expected values obtained rearranging matched-pair measures two sets multiple times. user-provided parameter max_rearrangements determines two paths function mbMCWtest can follow generate collection expected--chance mbMCW_BIs: mbMCW exact testing: number distinct matched-paired measure rearrangements can alter initial set distribution less max_rearrangements, function mbMCWtest calculates mbMCW_BIs possible data rearrangements. mbMCW approximated testing: number distinct matched-paired measure rearrangements can alter initial set distribution greater max_rearrangements, function mbMCWtest performs N = max_rearrangements random measure rearrangements calculate collection expected--chance mbMCW_BIs. calculates Pupper Plower values fraction expected--chance mbMCW_BIs higher equal lower equal observed mbMCW_BIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mbmcw-testing-results","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.3 matched-measures bivariate MCW (mbMCW) test","what":"mbMCW testing results","title":"MCWtests","text":"mbMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_mbMCWtest_results.csv, X user-defined identifier entry dataset CSV file. X_mbMCWtest_results.csv file contains four rows mbMCWtest, mbMCW_BIs calculated possible contrast matched unmatched measures (e.g., -b, b-, x-y y-x). X_mbMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Columns matched_condition_a matched_condition_b indicate conditions matched-paired measures provided. Columns unmatched_condition_x unmatched_condition_y indicate two sets matched-pairs measures. Columns N, N_x N_y indicate total number matched-paired measures, distribution two unmatched sets removing matched-pair missing values (NAs). Column test_type distinguishes exact approximated tests. Column BI_type indicates mbMCW_BI. Column matched_condition_contrast unmatched_condition_contrast indicate matched unmatched condition contrast row results. Column observed_BI contains value mbMCW_BIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance mbMCW_BIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent Pupper Plower values, respectively. denote fraction expected--chance mbMCW_BIs values higher equal lower equal observed mbMCW_BIs, respectively.","code":""},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mbmcw-testing-of-multiple-datasets-organized-vertically","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.3 matched-measures bivariate MCW (mbMCW) test > Examples","what":"mbMCW testing of multiple datasets organized vertically","title":"MCWtests","text":"example mbMCW testing entry dataset vertical layout showcases data two ideal tests (Table 9). Contrast test includes data two sets matched-paired measures randomly selected range (Figure 5). Contrast II test includes data two sets matched-paired measures. first set, matched-pair measures randomly selected range. second set, matched-pair measures randomly selected two different ranges, measures corresponding second condition matched-pair generally higher measures corresponding first condition matched-pair (Figure 5). results mbMCW tests align intended structure entry datasets (Table 10).","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-9--mbmcw-testing-entry-dataset-with-vertical-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast matched_condition_a matched_condition_b unmatched_condition       <char>              <char>              <char>              <char>  1:        I                AAAA                BBBB                XXXX  2:        I                AAAA                BBBB                XXXX  3:        I                AAAA                BBBB                XXXX  4:        I                AAAA                BBBB                XXXX  5:        I                AAAA                BBBB                XXXX  6:        I                AAAA                BBBB                YYYY  7:        I                AAAA                BBBB                YYYY  8:        I                AAAA                BBBB                YYYY  9:        I                AAAA                BBBB                YYYY 10:        I                AAAA                BBBB                YYYY 11:       II                AAAA                BBBB                XXXX 12:       II                AAAA                BBBB                XXXX 13:       II                AAAA                BBBB                XXXX 14:       II                AAAA                BBBB                XXXX 15:       II                AAAA                BBBB                XXXX 16:       II                AAAA                BBBB                YYYY 17:       II                AAAA                BBBB                YYYY 18:       II                AAAA                BBBB                YYYY 19:       II                AAAA                BBBB                YYYY 20:       II                AAAA                BBBB                YYYY     contrast matched_condition_a matched_condition_b unmatched_condition     value_a value_b       <int>   <int>  1:       6      37  2:      25      18  3:      13      27  4:      48      16  5:      44      70  6:      30      19  7:       9      24  8:      16      47  9:      47      33 10:      14      23 11:      13      47 12:      14      41 13:      42      13 14:      40      38 15:      47      11 16:      36      70 17:      38      64 18:      31      60 19:      33      67 20:      25      69     value_a value_b"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-10--results-of-mbmcw-testing-using-an-entry-dataset-with-vertical-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast matched_condition_a matched_condition_b unmatched_condition_x      <char>              <char>              <char>                <char> 1:        I                AAAA                BBBB                  XXXX 2:        I                AAAA                BBBB                  XXXX 3:        I                AAAA                BBBB                  XXXX 4:        I                AAAA                BBBB                  XXXX 5:       II                AAAA                BBBB                  XXXX 6:       II                AAAA                BBBB                  XXXX 7:       II                AAAA                BBBB                  XXXX 8:       II                AAAA                BBBB                  XXXX    unmatched_condition_y     N   N_x   N_y    test_type  BI_type                   <char> <int> <int> <int>       <char>   <char> 1:                  YYYY    10     5     5 approximated mbMCW_BI 2:                  YYYY    10     5     5 approximated mbMCW_BI 3:                  YYYY    10     5     5 approximated mbMCW_BI 4:                  YYYY    10     5     5 approximated mbMCW_BI 5:                  YYYY    10     5     5 approximated mbMCW_BI 6:                  YYYY    10     5     5 approximated mbMCW_BI 7:                  YYYY    10     5     5 approximated mbMCW_BI 8:                  YYYY    10     5     5 approximated mbMCW_BI    matched_condition_contrast unmatched_condition_contrast observed_BI                        <char>                       <char>       <num> 1:                  AAAA-BBBB                    XXXX-YYYY  0.01886792 2:                  AAAA-BBBB                    YYYY-XXXX -0.01886792 3:                  BBBB-AAAA                    XXXX-YYYY -0.01886792 4:                  BBBB-AAAA                    YYYY-XXXX  0.01886792 5:                  AAAA-BBBB                    XXXX-YYYY  0.64705882 6:                  AAAA-BBBB                    YYYY-XXXX -0.64705882 7:                  BBBB-AAAA                    XXXX-YYYY -0.64705882 8:                  BBBB-AAAA                    YYYY-XXXX  0.64705882    expected_by_chance_BI_N pupper plower                      <int>  <num>  <num> 1:                     200  0.470  0.570 2:                     200  0.570  0.470 3:                     200  0.570  0.470 4:                     200  0.470  0.570 5:                     200  0.035  0.980 6:                     200  0.980  0.035 7:                     200  0.980  0.035 8:                     200  0.035  0.980"},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"mbmcw-testing-of-multiple-datasets-organized-horizontally","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.3 matched-measures bivariate MCW (mbMCW) test > Examples","what":"mbMCW testing of multiple datasets organized horizontally","title":"MCWtests","text":"example mbMCW testing entry dataset vertical layout showcases data six tests (Table 11). includes two types informative columns accommodate cases users might want perform multiple tests nested structure. columns contrast prefix provide contextual information groups tests rows, columns element prefix provide contextual information test row. Contrast row includes two sets matched-paired measures randomly selected range (Figure 6). Contrast II row includes two sets matched-paired measures. first set, matched-pair measures randomly selected range. second set, matched-pair measures randomly selected two different ranges, measures corresponding second condition matched-pair generally higher measures corresponding first condition matched-pair (Figure 6). results mbMCW tests align intended structure entry datasets (Table 12).","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-11--mbmcw-testing-entry-dataset-with-horizontal-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait element_ID element_chr element_start element_end      <char>         <char>     <char>       <int>         <int>       <int> 1:        I        trait_a         x1           1          1000        2000 2:        I        trait_a         x2           1          5000        5500 3:        I        trait_a         x3           1         90000      100000 4:       II        trait_b         x1           1          1000        2000 5:       II        trait_b         x2           1          5000        5500 6:       II        trait_b         x3           1         90000      100000    matched_condition_a matched_condition_b unmatched_condition_x                 <char>              <char>                <char> 1:                AAAA                BBBB                  XXXX 2:                AAAA                BBBB                  XXXX 3:                AAAA                BBBB                  XXXX 4:                AAAA                BBBB                  XXXX 5:                AAAA                BBBB                  XXXX 6:                AAAA                BBBB                  XXXX    unmatched_condition_y x.a.1 x.a.2 x.a.3 x.a.4 x.a.5 y.a.6 y.a.7 y.a.8 y.a.9                   <char> <int> <int> <int> <int> <int> <int> <int> <int> <int> 1:                  YYYY     3    31    21     4    44    27    48    17    36 2:                  YYYY    20     7    30    27    40    34    34    17     7 3:                  YYYY    14    12    12    32    10    27    36    42    10 4:                  YYYY    12    16    35    36    38    36    49     6    22 5:                  YYYY     7    16    28    20    17    42    14    20    43 6:                  YYYY     5    30    17    46    22    47    13    32    20    y.a.10 x.b.1 x.b.2 x.b.3 x.b.4 x.b.5 y.b.6 y.b.7 y.b.8 y.b.9 y.b.10     <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>  <int> 1:      7    42    70    17    30    17    18    36    20    36     48 2:     26    41    19     2     1    48    22    34     8    11      7 3:      5    25    27    23    13    14     2    43    35    21     23 4:      2    15    18    17    33    14    68    64    77    75     63 5:     29    26    31    25    48    16    54    61    51    68     68 6:     28    19    42    26    26    13    78    64    70    51     52"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-12--results-of-mbmcw-testing-using-an-entry-dataset-with-horizontal-layout","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait element_ID element_chr element_start element_end       <char>         <char>     <char>       <int>         <int>       <int>  1:        I        trait_a         x1           1          1000        2000  2:        I        trait_a         x1           1          1000        2000  3:        I        trait_a         x1           1          1000        2000  4:        I        trait_a         x1           1          1000        2000  5:        I        trait_a         x2           1          5000        5500  6:        I        trait_a         x2           1          5000        5500  7:        I        trait_a         x2           1          5000        5500  8:        I        trait_a         x2           1          5000        5500  9:        I        trait_a         x3           1         90000      100000 10:        I        trait_a         x3           1         90000      100000 11:        I        trait_a         x3           1         90000      100000 12:        I        trait_a         x3           1         90000      100000 13:       II        trait_b         x1           1          1000        2000 14:       II        trait_b         x1           1          1000        2000 15:       II        trait_b         x1           1          1000        2000 16:       II        trait_b         x1           1          1000        2000 17:       II        trait_b         x2           1          5000        5500 18:       II        trait_b         x2           1          5000        5500 19:       II        trait_b         x2           1          5000        5500 20:       II        trait_b         x2           1          5000        5500 21:       II        trait_b         x3           1         90000      100000 22:       II        trait_b         x3           1         90000      100000 23:       II        trait_b         x3           1         90000      100000 24:       II        trait_b         x3           1         90000      100000     contrast contrast_trait element_ID element_chr element_start element_end     matched_condition_a matched_condition_b unmatched_condition_x                  <char>              <char>                <char>  1:                AAAA                BBBB                  XXXX  2:                AAAA                BBBB                  XXXX  3:                AAAA                BBBB                  XXXX  4:                AAAA                BBBB                  XXXX  5:                AAAA                BBBB                  XXXX  6:                AAAA                BBBB                  XXXX  7:                AAAA                BBBB                  XXXX  8:                AAAA                BBBB                  XXXX  9:                AAAA                BBBB                  XXXX 10:                AAAA                BBBB                  XXXX 11:                AAAA                BBBB                  XXXX 12:                AAAA                BBBB                  XXXX 13:                AAAA                BBBB                  XXXX 14:                AAAA                BBBB                  XXXX 15:                AAAA                BBBB                  XXXX 16:                AAAA                BBBB                  XXXX 17:                AAAA                BBBB                  XXXX 18:                AAAA                BBBB                  XXXX 19:                AAAA                BBBB                  XXXX 20:                AAAA                BBBB                  XXXX 21:                AAAA                BBBB                  XXXX 22:                AAAA                BBBB                  XXXX 23:                AAAA                BBBB                  XXXX 24:                AAAA                BBBB                  XXXX     matched_condition_a matched_condition_b unmatched_condition_x     unmatched_condition_y     N   N_x   N_y    test_type  BI_type                    <char> <int> <int> <int>       <char>   <char>  1:                  YYYY    10     5     5 approximated mbMCW_BI  2:                  YYYY    10     5     5 approximated mbMCW_BI  3:                  YYYY    10     5     5 approximated mbMCW_BI  4:                  YYYY    10     5     5 approximated mbMCW_BI  5:                  YYYY    10     5     5 approximated mbMCW_BI  6:                  YYYY    10     5     5 approximated mbMCW_BI  7:                  YYYY    10     5     5 approximated mbMCW_BI  8:                  YYYY    10     5     5 approximated mbMCW_BI  9:                  YYYY    10     5     5 approximated mbMCW_BI 10:                  YYYY    10     5     5 approximated mbMCW_BI 11:                  YYYY    10     5     5 approximated mbMCW_BI 12:                  YYYY    10     5     5 approximated mbMCW_BI 13:                  YYYY    10     5     5 approximated mbMCW_BI 14:                  YYYY    10     5     5 approximated mbMCW_BI 15:                  YYYY    10     5     5 approximated mbMCW_BI 16:                  YYYY    10     5     5 approximated mbMCW_BI 17:                  YYYY    10     5     5 approximated mbMCW_BI 18:                  YYYY    10     5     5 approximated mbMCW_BI 19:                  YYYY    10     5     5 approximated mbMCW_BI 20:                  YYYY    10     5     5 approximated mbMCW_BI 21:                  YYYY    10     5     5 approximated mbMCW_BI 22:                  YYYY    10     5     5 approximated mbMCW_BI 23:                  YYYY    10     5     5 approximated mbMCW_BI 24:                  YYYY    10     5     5 approximated mbMCW_BI     unmatched_condition_y     N   N_x   N_y    test_type  BI_type     matched_condition_contrast unmatched_condition_contrast observed_BI                         <char>                       <char>       <num>  1:                  AAAA-BBBB                    XXXX-YYYY -0.18181818  2:                  AAAA-BBBB                    YYYY-XXXX  0.18181818  3:                  BBBB-AAAA                    XXXX-YYYY  0.18181818  4:                  BBBB-AAAA                    YYYY-XXXX -0.18181818  5:                  AAAA-BBBB                    XXXX-YYYY -0.18181818  6:                  AAAA-BBBB                    YYYY-XXXX  0.18181818  7:                  BBBB-AAAA                    XXXX-YYYY  0.18181818  8:                  BBBB-AAAA                    YYYY-XXXX -0.18181818  9:                  AAAA-BBBB                    XXXX-YYYY -0.09803922 10:                  AAAA-BBBB                    YYYY-XXXX  0.09803922 11:                  BBBB-AAAA                    XXXX-YYYY  0.09803922 12:                  BBBB-AAAA                    YYYY-XXXX -0.09803922 13:                  AAAA-BBBB                    XXXX-YYYY  0.88888889 14:                  AAAA-BBBB                    YYYY-XXXX -0.88888889 15:                  BBBB-AAAA                    XXXX-YYYY -0.88888889 16:                  BBBB-AAAA                    YYYY-XXXX  0.88888889 17:                  AAAA-BBBB                    XXXX-YYYY  0.41818182 18:                  AAAA-BBBB                    YYYY-XXXX -0.41818182 19:                  BBBB-AAAA                    XXXX-YYYY -0.41818182 20:                  BBBB-AAAA                    YYYY-XXXX  0.41818182 21:                  AAAA-BBBB                    XXXX-YYYY  0.69811321 22:                  AAAA-BBBB                    YYYY-XXXX -0.69811321 23:                  BBBB-AAAA                    XXXX-YYYY -0.69811321 24:                  BBBB-AAAA                    YYYY-XXXX  0.69811321     matched_condition_contrast unmatched_condition_contrast observed_BI     expected_by_chance_BI_N pupper plower                       <int>  <num>  <num>  1:                     200  0.660  0.375  2:                     200  0.375  0.660  3:                     200  0.375  0.660  4:                     200  0.660  0.375  5:                     200  0.720  0.315  6:                     200  0.315  0.720  7:                     200  0.315  0.720  8:                     200  0.720  0.315  9:                     200  0.630  0.425 10:                     200  0.425  0.630 11:                     200  0.425  0.630 12:                     200  0.630  0.425 13:                     200  0.000  1.000 14:                     200  1.000  0.000 15:                     200  1.000  0.000 16:                     200  0.000  1.000 17:                     200  0.035  0.975 18:                     200  0.975  0.035 19:                     200  0.975  0.035 20:                     200  0.035  0.975 21:                     200  0.005  1.000 22:                     200  1.000  0.005 23:                     200  1.000  0.005 24:                     200  0.005  1.000     expected_by_chance_BI_N pupper plower"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"introduction-3","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.4 bias-measures MCW (bMCW) test","what":"Introduction","title":"MCWtests","text":"bMCW test actually combination two tests assess whether set measures bias quantitative trait two conditions subset bias measures significantly biased direction. instance, bMCW tests can used analyze bias indexes obtained using MCW tests fold change transcript abundances spanning entire transcriptome genes located specific genomic regions two sets mice exposed different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"bmcw-testing-entry-dataset-formatting","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.4 bias-measures MCW (bMCW) test","what":"bMCW testing entry dataset formatting","title":"MCWtests","text":"executing bMCWtest function, users must provide path local CSV file named X_bMCWtest_data.csv, X serves user-defined identifier. X_bMCWtest_data.csv include following columns: Column bias_value contains value bias measure analysis. Columns subset_x, x represents specific type subset column, “chr” chromosomes “GO” Gene Ontology. columns required users intend assess whether bias measures certain subsets elements dataset significantly biased direction. Columns subset_x can indicate whether element belongs subset using either “YES” “”, specific subset names like “chr1” “chrX”, combination , “chr1”, “chrX” “”. function bMCW test transform dataset conduct independent analysis subset elements marked “YES” specific subset name subset_x column. many informative columns needed users contextualize results test. names columns contain terms bias_value subset. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Users can specify columns information relevant element row using column name structure element_x, x indicates specific information column (see example). However, element_x columns essential bMCW testing included results file.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"bmcw-testing-process","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.4 bias-measures MCW (bMCW) test","what":"bMCW testing process","title":"MCWtests","text":"function bMCWtest eliminates missing values (NAs) dataset proceeding following steps. estimate bias bias measures entire dataset subset , function bMCWtest performs following tasks: ranks bias measures non-zero values lowest highest. Bias measures value 0 assigned 0 rank. multiple bias measures absolute value, tied bias measures asssigned lowest rank possible. assigns rank sign based sign corresponding bias measure. calculates whole-set bias index (bMCW_wBI) summing signed ranks elements dataset dividing maximum number sum bias measures positive. Consequently, bMCW_wBI ranges 1 bias measures positive, -1 bias measures negative. calculates subset bias index (bMCW_sBI) subset elements analysis summing signed ranks elements subset dividing maximum number sum elements subset highest possible positive bias measures. Consequently, bMCW_sBI ranges 1 bias measures subset question highest positive bias measures entire dataset, -1 bias measures subset question lowest negative bias measures entire dataset. assess significance bMCW-wBIs bMCW-sBIs obtained user-provided dataset (observed bMCW-wBIs bMCW-sBIs), function bMCWtest performs following tasks,","code":"- It generates a collection of expected-by-chance bMCW_wBIs by rearranging the signs of all signed ranks multiple times. The function *bMCWtest* also generates a collection of expected-by-chance bMCW_sBIs by rearranging the subset of elements multiple times. The user-provided parameter *max_rearrangements* determines the two paths that the function *bMCWtest* can follow to generate the collection of expected-by-chance bMCW_wBIs and bMCW_sBIs:      - *bMCW exact testing*: If the number of distinct bias measure rearrangements that can alter their initial sign distribution or subset distribution is less than *max_rearrangements*, the function *bMCWtest* calculates bMCW_wBIs or bMCW_sBIs for all possible data rearrangements.     - *bMCW approximated testing*: If the number of distinct bias measure rearrangements that can alter their initial sign distribution or subset distribution is greater than *max_rearrangements*, the function *bMCWtest* performs N = *max_rearrangements* random measure rearrangements to calculate the collection of expected-by-chance bMCW_wBIs or bMCW_sBIs.  - It calculates *P~upper~* and *P~lower~* values, as the fraction of expected-by-chance bMCW-wBIs and bMCW-sBIs that are higher or equal to and lower or equal to the observed bMCW-wBIs and bMCW-sBIs, respectively."},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"bmcw-testing-results","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.4 bias-measures MCW (bMCW) test","what":"bMCW testing results","title":"MCWtests","text":"bMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_bMCWtest_results.csv, X user-defined identifier entry dataset CSV file. X_bMCWtest_results.csv file contains one row bMCWtest indicate results whole-set bMCW testing, many rows necessary indicate results subset bMCW testing. Rows whole-set analyses top X_bMCWtest_results.csv file. X_bMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Column subset_type indicates whether results row corresponds whole-set tests specific subset tests, “chr” chromosomes “GO” Gene Ontology terms. Column tested_subset indicates name subset analysis. whole-set tests, tested_subset column indicates “none”. subset tests, tested_subset column indicates “YES” specific name subset analysis, “chr1” “chrX”. Columns N n indicate total number elements whole set associated subset analysis, respectively, removing missing values (NAs). whole-set tests, columns N n value. Column test_type distinguishes exact approximated tests. Column BI_type indicates whether results correspond whole-set tests (bMCW_wBI) subset tests (bMCW_sBIs). Column observed_BI contains value bMCW_BIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance bMCW_wBIs bMCW_sBIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent Pupper Plower values, respectively. denote fraction expected--chance bMCW_wBIs bMCW_sBIs values higher equal lower equal observed bMCW_wBIs bMCW_sBIs, respectively.","code":""},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"bmcw-testing-of-multiple-datasets","dir":"Articles","previous_headings":"4. Specific MCW tests > 4.4 bias-measures MCW (bMCW) test > Examples","what":"bMCW testing of multiple datasets","title":"MCWtests","text":"example bMCW testing entry dataset includes bias measures three tests, ten elements distributed across four subsets: chr1, chr2, chrX chrY (Table 13), example, bias measures study uMCW_BIs, range 1 -1. Contrast test includes bias measures randomly selected range (Figure 7). Contrast II test includes bias measures randomly selected range, positive values (Figure 7). Contrast III includes bias measures randomly selected range three four subsets, bias measures fourth subset randomly selected largest positive values dataset (Figure 7). results bMCW tests align intended structure entry datasets (Table 14).","code":""},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-13--bmcw-testing-entry-dataset","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait element_ID element_chr element_start element_end       <char>         <char>     <char>      <char>         <int>       <int>  1:        I        trait_a         x1        chr1          1000        2000  2:        I        trait_a         x2        chr1          5000        5500  3:        I        trait_a         x3        chr1         90000      100000  4:        I        trait_a         x4        chr2           150         300  5:        I        trait_a         x5        chr2          2545        7000  6:        I        trait_a         x6        chr2         80000      100000  7:        I        trait_a         x7        chrX          4000        7000  8:        I        trait_a         x8        chrX          9000       10000  9:        I        trait_a         x9        chrX         30000       31000 10:        I        trait_a        x10        chrY           800        1000 11:       II        trait_b         x1        chr1          1000        2000 12:       II        trait_b         x2        chr1          5000        5500 13:       II        trait_b         x3        chr1         90000      100000 14:       II        trait_b         x4        chr2           150         300 15:       II        trait_b         x5        chr2          2545        7000 16:       II        trait_b         x6        chr2         80000      100000 17:       II        trait_b         x7        chrX          4000        7000 18:       II        trait_b         x8        chrX          9000       10000 19:       II        trait_b         x9        chrX         30000       31000 20:       II        trait_b        x10        chrY           800        1000 21:      III        trait_c         x1        chr1          1000        2000 22:      III        trait_c         x2        chr1          5000        5500 23:      III        trait_c         x3        chr1         90000      100000 24:      III        trait_c         x4        chr2           150         300 25:      III        trait_c         x5        chr2          2545        7000 26:      III        trait_c         x6        chr2         80000      100000 27:      III        trait_c         x7        chrX          4000        7000 28:      III        trait_c         x8        chrX          9000       10000 29:      III        trait_c         x9        chrX         30000       31000 30:      III        trait_c        x10        chrY           800        1000     contrast contrast_trait element_ID element_chr element_start element_end     subset_chr bias_measure condition_contrast  bias_value         <char>       <char>             <char>       <num>  1:       chr1      uMCW_BI          AAAA-BBBB  0.59883185  2:       chr1      uMCW_BI          AAAA-BBBB -0.37376010  3:       chr1      uMCW_BI          AAAA-BBBB  0.75433521  4:       chr2      uMCW_BI          AAAA-BBBB -0.36807420  5:       chr2      uMCW_BI          AAAA-BBBB -0.97818020  6:       chr2      uMCW_BI          AAAA-BBBB  0.59299509  7:       chrX      uMCW_BI          AAAA-BBBB -0.58644011  8:       chrX      uMCW_BI          AAAA-BBBB -0.36797886  9:       chrX      uMCW_BI          AAAA-BBBB -0.63406711 10:       chrY      uMCW_BI          AAAA-BBBB  0.17762437 11:       chr1      uMCW_BI          AAAA-BBBB -0.03649558 12:       chr1      uMCW_BI          AAAA-BBBB  0.74867686 13:       chr1      uMCW_BI          AAAA-BBBB  0.81900144 14:       chr2      uMCW_BI          AAAA-BBBB  0.95044745 15:       chr2      uMCW_BI          AAAA-BBBB  0.87731860 16:       chr2      uMCW_BI          AAAA-BBBB  0.30838414 17:       chrX      uMCW_BI          AAAA-BBBB  0.44241725 18:       chrX      uMCW_BI          AAAA-BBBB  0.83965786 19:       chrX      uMCW_BI          AAAA-BBBB  0.65278713 20:       chrY      uMCW_BI          AAAA-BBBB -0.41912458 21:       chr1      uMCW_BI          AAAA-BBBB  0.42249472 22:       chr1      uMCW_BI          AAAA-BBBB  0.69599878 23:       chr1      uMCW_BI          AAAA-BBBB  0.59133980 24:       chr2      uMCW_BI          AAAA-BBBB -0.04787103 25:       chr2      uMCW_BI          AAAA-BBBB  0.01716967 26:       chr2      uMCW_BI          AAAA-BBBB  0.09079163 27:       chrX      uMCW_BI          AAAA-BBBB -0.07600623 28:       chrX      uMCW_BI          AAAA-BBBB -0.09808774 29:       chrX      uMCW_BI          AAAA-BBBB -0.02192925 30:       chrY      uMCW_BI          AAAA-BBBB -0.08190336     subset_chr bias_measure condition_contrast  bias_value"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/articles/MCWtests.html","id":"table-14--bmcw-testing-results","dir":"Articles","previous_headings":"","what":"MCWtests","title":"MCWtests","text":"","code":"contrast contrast_trait bias_measure condition_contrast subset_type       <char>         <char>       <char>             <char>      <char>  1:        I        trait_a      uMCW_BI          AAAA-BBBB    wholeset  2:       II        trait_b      uMCW_BI          AAAA-BBBB    wholeset  3:      III        trait_c      uMCW_BI          AAAA-BBBB    wholeset  4:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr  5:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr  6:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr  7:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr  8:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr  9:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr 10:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr 11:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr 12:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr 13:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr 14:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr 15:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr     tested_subset     N     n    test_type  BI_type observed_BI            <char> <int> <int>       <char>   <char>       <num>  1:          none    10    10 approximated bMCW_wBI  -0.1636364  2:          none    10    10 approximated bMCW_wBI   0.8545455  3:          none    10    10 approximated bMCW_wBI   0.2363636  4:          chr1    10     3        exact bMCW_sBI   0.4444444  5:          chr2    10     3        exact bMCW_sBI  -0.2592593  6:          chrX    10     3        exact bMCW_sBI  -0.5555556  7:          chrY    10     1        exact bMCW_sBI   0.1000000  8:          chr1    10     3        exact bMCW_sBI   0.4444444  9:          chr2    10     3        exact bMCW_sBI   0.7777778 10:          chrX    10     3        exact bMCW_sBI   0.6296296 11:          chrY    10     1        exact bMCW_sBI  -0.3000000 12:          chr1    10     3        exact bMCW_sBI   1.0000000 13:          chr2    10     3        exact bMCW_sBI   0.1481481 14:          chrX    10     3        exact bMCW_sBI  -0.4814815 15:          chrY    10     1        exact bMCW_sBI  -0.5000000     expected_by_chance_BI_N      pupper     plower                       <int>       <num>      <num>  1:                     200 0.435000000 0.64500000  2:                     200 0.050000000 0.96500000  3:                     200 0.090000000 0.92500000  4:                     120 0.075000000 0.94166667  5:                     120 0.700000000 0.33333333  6:                     120 0.900000000 0.12500000  7:                      10 0.400000000 0.70000000  8:                     120 0.658333333 0.40000000  9:                     120 0.175000000 0.87500000 10:                     120 0.366666667 0.68333333 11:                      10 1.000000000 0.10000000 12:                     120 0.008333333 1.00000000 13:                     120 0.483333333 0.55833333 14:                     120 0.966666667 0.04166667 15:                      10 0.900000000 0.20000000"},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carlos Diaz-Castillo. Author, maintainer. Raquel Chamorro-Garcia. Author.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Diaz-Castillo C, Chamorro-Garcia R (2024). MCWtests: suite Monte Carlo-Wilcoxon tests. R package version 1.0.0, https://diazcastillo.github.io/MCWtests/, https://github.com/diazcastillo/MCWtests.","code":"@Manual{,   title = {MCWtests: A suite of Monte Carlo-Wilcoxon tests},   author = {Carlos Diaz-Castillo and Raquel Chamorro-Garcia},   year = {2024},   note = {R package version 1.0.0, https://diazcastillo.github.io/MCWtests/},   url = {https://github.com/diazcastillo/MCWtests}, }"},{"path":"https://diazcastillo.github.io/MCWtests/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A suite of Monte Carlo-Wilcoxon tests","text":"can install development version MCWtests GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"diazcastillo/MCWtests\")"},{"path":"https://diazcastillo.github.io/MCWtests/index.html","id":"introduction-to-mcw-testing","dir":"","previous_headings":"","what":"A suite of Monte Carlo-Wilcoxon tests","title":"A suite of Monte Carlo-Wilcoxon tests","text":"Originally, Monte Carlo-Wilcoxon (MCW) tests designed determined whether differences two sets data significantly biased direction compared expected chance. MCW tests proceed calculating sum--ranks-based bias indexes, hence reference Frank Wilcoxon invented non-parametric rank-sum signed-rank tests, rearranging dataset multiple times, hence Monte Carlo reference often associated analytical strategies based repeated random sampling(Díaz-Castillo 2013, 2017, 2018; Chamorro-Garcia et al. 2017; Diaz-Castillo et al. 2019). MCWtests package encompasses original MCW test three variations differ data structures specific questions interrogate. matched-measures univariate MCW (muMCW) test, original MCW test, assesses whether one set inherently matched-paired measures significantly biased direction(Díaz-Castillo 2013, 2017, 2018; Chamorro-Garcia et al. 2017; Diaz-Castillo et al. 2019). instance, muMCW tests can used analyze bodyweights transcript abundances determined two different timepoints set mice. unmatched-measures MCW (uMCW) test assesses whether two sets unmatched measures heterogeneity significantly biased direction. instance, uMCW tests can used analyze bodyweights transcript abundances determined two sets mice maintained different conditions. matched-measures bivariate MCW (mbMCW) test assesses whether two sets inherently matched-paired measures significantly differentially biased direction. instance, mbMCW tests can used analyze bodyweights transcript abundances determined two different timepoints two sets mice exposed different conditions. bias-measures MCW (bMCW) test assesses whether set measures bias quantitative trait two conditions subset bias measures significantly biased direction. instance, bMCW tests can used analyze bias indexes obtained using MCW tests fold change transcript abundances spanning entire transcriptome genes located specific genomic regions two sets mice exposed different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/index.html","id":"mcw-testing-process","dir":"","previous_headings":"","what":"MCW testing process","title":"A suite of Monte Carlo-Wilcoxon tests","text":"Although MCW test examines distinct data structures address slightly different questions, MCW tests share two fundamental steps: quantitatively determine extent direction bias measure analysis, MCW tests calculate bias index (BI) summing ranks dividing sums maximum possible value sums. Consequently, BIs range 1 -1 measure analysis completely biased possible direction. determine significance BIs calculated user-provided dataset (observed BIs), collection expected--chance BIs generated rearranging original dataset multiple times calculating BIs iteration. Pupper Plower values calculated fractions expected--chance BIs values higher equal lower equal observed BIs, respectively. MCW test employs user-provided parameter max_rearrangements follow two alternative paths. MCW exact tests. number distinct rearrangements can generated dataset analysis less max_rearrangements, MCW tests actually generate possible data rearrangements create collection expected--chance BIs. case, Pupper Plower values exact estimations likelihood obtaining BIs equal extreme values compared observed BIs datasets size range different internal structures. MCW approximated tests. number distinct rearrangements can generated dataset analysis greater max_rearrangements, MCW tests perform specified number random data rearrangements, equal value max_rearrangements, generate collection expected--chance BIs. case, Pupper Plower values represent approximate estimations likelihood obtaining BIs equal extreme values compared observed BIs datasets size range different internal structures.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"A suite of Monte Carlo-Wilcoxon tests","text":"Please, see xxx detailed information structure MCWtests package, including MCW test examples.","code":""},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/reference/MCWtests-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MCWtests: A suite of Monte Carlo-Wilcoxon tests — MCWtests-package","title":"MCWtests: A suite of Monte Carlo-Wilcoxon tests — MCWtests-package","text":"Monte Carlo-Wilcoxon (MCW) tests assess significance difference two sets quantitative data calculating sums ranks (Wilcoxon) dataset examination rearranging multiple times (Monte Carlo). package offers ability execute four different MCW tests, unique data structures specific questions address.","code":""},{"path":[]},{"path":"https://diazcastillo.github.io/MCWtests/reference/MCWtests-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MCWtests: A suite of Monte Carlo-Wilcoxon tests — MCWtests-package","text":"Maintainer: Carlos Diaz-Castillo diazcas@ucsc.edu (ORCID) Authors: Raquel Chamorro-Garcia rchamorr@ucsc.edu (ORCID)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test — bMCW_approximated_test","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test — bMCW_approximated_test","text":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test — bMCW_approximated_test","text":"","code":"bMCW_approximated_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test — bMCW_approximated_test","text":"x Data bMCW approximated tests provided function bMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test_observed_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Observed Bias Indexes (BIs) — bMCW_approximated_test_observed_BIs","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Observed Bias Indexes (BIs) — bMCW_approximated_test_observed_BIs","text":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Observed Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test_observed_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Observed Bias Indexes (BIs) — bMCW_approximated_test_observed_BIs","text":"","code":"bMCW_approximated_test_observed_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test_observed_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Observed Bias Indexes (BIs) — bMCW_approximated_test_observed_BIs","text":"x Data bMCW approximated tests provided function bMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test_simulated_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Simulated Bias Indexes (BIs) — bMCW_approximated_test_simulated_BIs","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Simulated Bias Indexes (BIs) — bMCW_approximated_test_simulated_BIs","text":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Simulated Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test_simulated_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Simulated Bias Indexes (BIs) — bMCW_approximated_test_simulated_BIs","text":"","code":"bMCW_approximated_test_simulated_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_approximated_test_simulated_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Approximated Test: Simulated Bias Indexes (BIs) — bMCW_approximated_test_simulated_BIs","text":"x Data bMCW approximated tests provided function bMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test — bMCW_exact_test","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test — bMCW_exact_test","text":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test — bMCW_exact_test","text":"","code":"bMCW_exact_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test — bMCW_exact_test","text":"x Data bMCW exact tests provided function bMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test_subset_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Subset Combinations — bMCW_exact_test_subset_combinations","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Subset Combinations — bMCW_exact_test_subset_combinations","text":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: Subset Combinations","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test_subset_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Subset Combinations — bMCW_exact_test_subset_combinations","text":"","code":"bMCW_exact_test_subset_combinations(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test_subset_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Subset Combinations — bMCW_exact_test_subset_combinations","text":"x Data bMCW exact tests provided function bMCW_exact_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test_wholeset_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Whole-set Combinations — bMCW_exact_test_wholeset_combinations","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Whole-set Combinations — bMCW_exact_test_wholeset_combinations","text":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: Whole-set Combinations","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test_wholeset_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Whole-set Combinations — bMCW_exact_test_wholeset_combinations","text":"","code":"bMCW_exact_test_wholeset_combinations(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCW_exact_test_wholeset_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Biased-Measure Monte Carlo-Wilcoxon (bMCW) Exact Test: All Whole-set Combinations — bMCW_exact_test_wholeset_combinations","text":"x Data bMCW exact tests provided function bMCW_exact_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCWtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","title":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","text":"bMCW test statistical tool assess whether set measures bias quantitative trait two conditions subset bias measures significantly biased direction. instance, bMCW tests can used analyze bias indexes obtained using MCW tests fold change transcript abundances spanning entire transcriptome genes located specific genomic regions two sets mice exposed different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCWtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","text":"","code":"bMCWtest(path, max_rearrangements)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCWtest.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","text":"executing bMCWtest function, users must provide path local CSV file named X_bMCWtest_data.csv, X serves user-defined identifier. X_bMCWtest_data.csv include following columns: Column bias_value contains value bias measure analysis. Columns subset_x, x represents specific type subset column, \"chr\" chromosomes \"GO\" Gene Ontology. columns required users intend assess whether bias measures certain subsets elements dataset significantly biased direction. Columns subset_x can indicate whether element belongs subset using either \"YES\" \"\", specific subset names like \"chr1\" \"chrX\", combination , \"chr1\", \"chrX\" \"\". function bMCW test transform dataset conduct independent analysis subset elements marked \"YES\" specific subset name subset_x column. many informative columns needed users contextualize results test. names columns contain terms bias_value subset. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Users can specify columns information relevant element row using column name structure element_x, x indicates specific information column (see example). However, element_x columns essential bMCW testing included results file.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCWtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","text":"path Path local CSV file containing entry dataset formatted bMCW tests. max_rearrangements User-defined maximum number rearrangements dataset used function bMCWtest generate collection expected--chance bMCW_wBIs bMCW_sBIs estimate statistical significance observed bMCW_BIs. number distinct dataset rearrangements less max_rearrangements, bMCWtest calculates bMCW_wBIs bMCW_sBIs possible data rearrangements. number distinct dataset rearrangements greater max_rearrangements, bMCWtest perform N = max_rearrangements random measure rearrangements calculate collection expected--chance bMCW_wBIs bMCW_sBIs.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCWtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","text":"bMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_bMCWtest_results.csv, X user-defined identifier entry dataset CSV file. X_bMCWtest_results.csv file contains one row bMCWtest indicate results whole-set bMCW testing, many rows necessary indicate results subset bMCW testing. Rows whole-set analyses top X_bMCWtest_results.csv file. X_bMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Column subset_type indicates whether results row corresponds whole-set tests specific subset tests, \"chr\" chromosomes \"GO\" Gene Ontology terms. Column tested_subset indicates name subset analysis. whole-set tests, tested_subset column indicates \"none\". subset tests, tested_subset column indicates \"YES\" specific name subset analysis, \"chr1\" \"chrX\". Columns N n indicate total number elements whole set associated subset analysis, respectively, removing missing values (NAs). whole-set tests, columns N n value. Column test_type distinguishes exact approximated tests. Column BI_type indicates whether results correspond whole-set tests (bMCW_wBI) subset tests (bMCW_sBIs). Column observed_BI contains value bMCW_BIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance bMCW_wBIs bMCW_sBIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent P~upper~ P~lower~ values, respectively. denote fraction expected--chance bMCW_wBIs bMCW_sBIs values higher equal lower equal observed bMCW_wBIs bMCW_sBIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCWtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","text":"function bMCWtest eliminates missing values (NAs) dataset proceeding following steps. estimate bias bias measures entire dataset subset , function bMCWtest performs following tasks: ranks bias measures non-zero values lowest highest. Bias measures value 0 assigned 0 rank. multiple bias measures absolute value, tied bias measures asssigned lowest rank possible. assigns rank sign based sign corresponding bias measure. calculates whole-set bias index (bMCW_wBI) summing signed ranks elements dataset dividing maximum number sum bias measures positive. Consequently, bMCW_wBI ranges 1 bias measures positive, -1 bias measures negative. calculates subset bias index (bMCW_sBI) subset elements analysis summing signed ranks elements subset dividing maximum number sum elements subset highest possible positive bias measures. Consequently, bMCW_sBI ranges 1 bias measures subset question highest positive bias measures entire dataset, -1 bias measures subset question lowest negative bias measures entire dataset. assess significance bMCW-wBIs bMCW-sBIs obtained user-provided dataset (observed bMCW-wBIs bMCW-sBIs), function bMCWtest performs following tasks, generates collection expected--chance bMCW_wBIs rearranging signs signed ranks multiple times. function bMCWtest also generates collection expected--chance bMCW_sBIs rearranging subset elements multiple times. user-provided parameter max_rearrangements determines two paths function bMCWtest can follow generate collection expected--chance bMCW_wBIs bMCW_sBIs: bMCW exact testing: number distinct bias measure rearrangements can alter initial sign distribution subset distribution less max_rearrangements, function bMCWtest calculates bMCW_wBIs bMCW_sBIs possible data rearrangements. bMCW approximated testing: number distinct bias measure rearrangements can alter initial sign distribution subset distribution greater max_rearrangements, function bMCWtest performs N = max_rearrangements random measure rearrangements calculate collection expected--chance bMCW_wBIs bMCW_sBIs. calculates P~upper~ P~lower~ values, fraction expected--chance bMCW-wBIs bMCW-sBIs higher equal lower equal observed bMCW-wBIs bMCW-sBIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/bMCWtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bias-measures Monte Carlo-Wilcoxon (bMCW) Test — bMCWtest","text":"","code":"test_temp <- tempdir() extdata <- system.file(\"extdata\", \"example_bMCWtest_data.csv\", package = \"MCWtests\") file.copy(extdata, test_temp) #> [1] TRUE # running bMCWtest with an ideal entry dataset path <- file.path(test_temp, \"example_bMCWtest_data.csv\") bMCWtest_results <- bMCWtest(path, 10) #> total number of tests: 15 #> number of wholeset exact tests: 0 #> number of subset exact tests: 0 #> number of wholeset approximated tests: 3 #> number of subset approximated tests: 12 #> running approximated tests:  print(bMCWtest_results) #>     contrast contrast_trait bias_measure condition_contrast subset_type #>       <char>         <char>       <char>             <char>      <fctr> #>  1:        I        trait_a      uMCW_BI          AAAA-BBBB    wholeset #>  2:       II        trait_b      uMCW_BI          AAAA-BBBB    wholeset #>  3:      III        trait_c      uMCW_BI          AAAA-BBBB    wholeset #>  4:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr #>  5:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr #>  6:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr #>  7:        I        trait_a      uMCW_BI          AAAA-BBBB  subset_chr #>  8:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr #>  9:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr #> 10:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr #> 11:       II        trait_b      uMCW_BI          AAAA-BBBB  subset_chr #> 12:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr #> 13:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr #> 14:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr #> 15:      III        trait_c      uMCW_BI          AAAA-BBBB  subset_chr #>     tested_subset     N     n    test_type  BI_type observed_BI #>            <char> <int> <int>       <char>   <char>       <num> #>  1:          none    10    10 approximated bMCW_wBI  -0.1636364 #>  2:          none    10    10 approximated bMCW_wBI   0.8545455 #>  3:          none    10    10 approximated bMCW_wBI   0.2363636 #>  4:          chr1    10     3 approximated bMCW_sBI   0.4444444 #>  5:          chr2    10     3 approximated bMCW_sBI  -0.2592593 #>  6:          chrX    10     3 approximated bMCW_sBI  -0.5555556 #>  7:          chrY    10     1 approximated bMCW_sBI   0.1000000 #>  8:          chr1    10     3 approximated bMCW_sBI   0.4444444 #>  9:          chr2    10     3 approximated bMCW_sBI   0.7777778 #> 10:          chrX    10     3 approximated bMCW_sBI   0.6296296 #> 11:          chrY    10     1 approximated bMCW_sBI  -0.3000000 #> 12:          chr1    10     3 approximated bMCW_sBI   1.0000000 #> 13:          chr2    10     3 approximated bMCW_sBI   0.1481481 #> 14:          chrX    10     3 approximated bMCW_sBI  -0.4814815 #> 15:          chrY    10     1 approximated bMCW_sBI  -0.5000000 #>     expected_by_chance_BI_N pupper plower #>                       <int>  <num>  <num> #>  1:                      10    0.4    0.6 #>  2:                      10    0.0    1.0 #>  3:                      10    0.0    1.0 #>  4:                      10    0.1    0.9 #>  5:                      10    0.4    0.6 #>  6:                      10    1.0    0.0 #>  7:                      10    0.4    0.6 #>  8:                      10    0.4    0.6 #>  9:                      10    0.3    0.8 #> 10:                      10    0.5    0.5 #> 11:                      10    1.0    0.0 #> 12:                      10    0.0    1.0 #> 13:                      10    0.2    0.8 #> 14:                      10    1.0    0.0 #> 15:                      10    0.9    0.1 rm(test_temp)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test — mbMCW_approximated_test","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test — mbMCW_approximated_test","text":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test — mbMCW_approximated_test","text":"","code":"mbMCW_approximated_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test — mbMCW_approximated_test","text":"x Data mbMCW approximated tests provided function mbMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test_observed_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Observed Bias Indexes (BIs) — mbMCW_approximated_test_observed_BIs","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Observed Bias Indexes (BIs) — mbMCW_approximated_test_observed_BIs","text":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Observed Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test_observed_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Observed Bias Indexes (BIs) — mbMCW_approximated_test_observed_BIs","text":"","code":"mbMCW_approximated_test_observed_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test_observed_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Observed Bias Indexes (BIs) — mbMCW_approximated_test_observed_BIs","text":"x Data mbMCW approximated tests provided function mbMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test_simulated_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Simulated Bias Indexes (BIs) — mbMCW_approximated_test_simulated_BIs","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Simulated Bias Indexes (BIs) — mbMCW_approximated_test_simulated_BIs","text":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Simulated Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test_simulated_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Simulated Bias Indexes (BIs) — mbMCW_approximated_test_simulated_BIs","text":"","code":"mbMCW_approximated_test_simulated_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_approximated_test_simulated_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Approximated Test: Simulated Bias Indexes (BIs) — mbMCW_approximated_test_simulated_BIs","text":"x Data mbMCW approximated tests provided function mbMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_exact_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Exact Test — mbMCW_exact_test","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Exact Test — mbMCW_exact_test","text":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Exact Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_exact_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Exact Test — mbMCW_exact_test","text":"","code":"mbMCW_exact_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCW_exact_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Bivariate Monte Carlo-Wilcoxon (mbMCW) Exact Test — mbMCW_exact_test","text":"x Data mbMCW exact tests provided function mbMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCWtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","title":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","text":"mbMCW test statistical tool assess whether two sets inherently matched-paired measures significantly differentially biased direction. instance, mbMCW tests can used analyze bodyweights transcript abundances determined two different timepoints two sets mice exposed different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCWtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","text":"","code":"mbMCWtest(path, max_rearrangements)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCWtest.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","text":"executing mbMCWtest function, users must provide path local CSV file named X_mbMCWtest_data.csv, X serves user-defined identifier. X_mbMCWtest_data.csv can structured two distinct formats: Vertical layout: format allows appending datasets varying structures, different numbers matched-pairs per set appended test. Vertical entry datasets include following columns: Columns matched_condition_a matched_condition_b uniquely identify two conditions matched-paired measure collected. Column unmatched_condition uniquely identifies two sets matched-paired measures analysis. Columns value_a value_b contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain terms condition value. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Horizontal layout: format allows appending datasets similar structures, number matched-paired measures collected two conditions. Horizontal entry datasets include following columns: Columns matched_condition_a matched_condition_b uniquely identify two conditions matched-paired measure collected. Columns unmatched_condition_x unmatched_condition_y uniquely identify two different sets matched-paired measures analysis. Columns x.., y.., x.b.y.b., represents integers differentiate specific matched-pair measures, contain actual measures analysis. many informative columns needed users contextualize results test. name columns contain term condition structure x.., y.., x.b.y.b.columns. columns optional running single test, least one column required running multiple tests simultaneously.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCWtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","text":"path Path local CSV file containing entry dataset formatted mbMCW tests. max_rearrangements User-defined maximum number rearrangements dataset used function mbMCWtest generate collection expected--chance mbMCW_BIs estimate statistical significance observed mbMCW_BIs. number distinct dataset rearrangements less max_rearrangements, mbMCWtest calculates mbMCW_BIs possible data rearrangements. number distinct dataset rearrangements greater max_rearrangements, mbMCWtest perform N = max_rearrangements random measure rearrangements calculate collection expected--chance mbMCW_BIs.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCWtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","text":"mbMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_mbMCWtest_results.csv, X user-defined identifier entry dataset CSV file. X_mbMCWtest_results.csv file contains four rows mbMCWtest, mbMCW_BIs calculated possible contrast matched unmatched measures (e.g., -b, b-, x-y y-x). X_mbMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Columns matched_condition_a matched_condition_b indicate conditions matched-paired measures provided. Columns unmatched_condition_x unmatched_condition_y indicate two sets matched-pairs measures. Columns N, N_x N_y indicate total number matched-paired measures, distribution two unmatched sets removing matched-pair missing values (NAs). Column test_type distinguishes exact approximated tests. Column BI_type indicates mbMCW_BI. Column matched_condition_contrast unmatched_condition_contrast indicate matched unmatched condition contrast row results. Column observed_BI contains value mbMCW_BIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance mbMCW_BIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent P~upper~ P~lower~ values, respectively. denote fraction expected--chance mbMCW_BIs values higher equal lower equal observed mbMCW_BIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCWtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","text":"function mbMCWtest eliminates matched-paired measures least one missing value (NA) proceeding following steps. estimate differential bias two sets matched-paired measures dataset, function mbMCWtest perfoms following tasks: matched-paired measure, subtracts values two possible matched condition contrasts (e.g., -b b-). matched condition contrast, ranks absolute values non-zero differences lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, tied measure pair differences assigned lowest rank possible. assigns measure pair rank sign based sign corresponding measure pair difference. set matched-paired measures (e.g., x y), sums signed ranks matched condition contrast (e.g., -b b-). set matched-paired measures (e.g., x y) matched condition contrast (e.g., -b b-), calculates one mbMCW_BI. value obtained dividing sum signed ranks maximum number sum corresponding measure pairs highest possible positive ranks. Consequently, mbMCW_BI ranges 1 values matched-pair measure differences set analysis highest positive values, -1 values matched-pair measure differences set analysis lowest negative values. assess significance mbMCW_BIs obtained user-provided dataset (observed mbMCW_BIs), function mbMCWtest perfoms following tasks: generates collection expected--chance mbMCW_BIs. expected values obtained rearranging matched-pair measures two sets multiple times. user-provided parameter max_rearrangements determines two paths function mbMCWtest can follow generate collection expected--chance mbMCW_BIs: mbMCW exact testing: number distinct matched-paired measure rearrangements can alter initial set distribution less max_rearrangements, function mbMCWtest calculates mbMCW_BIs possible data rearrangements. mbMCW approximated testing: number distinct matched-paired measure rearrangements can alter initial set distribution greater max_rearrangements, function mbMCWtest performs N = max_rearrangements random measure rearrangements calculate collection expected--chance mbMCW_BIs. calculates P~upper~ P~lower~ values fraction expected--chance mbMCW_BIs higher equal lower equal observed mbMCW_BIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/mbMCWtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matched-Measures Bivariate Monte Carlo-Wilcoxon (mbMCW) Test — mbMCWtest","text":"","code":"test_temp <- tempdir() extdata_v <- system.file(\"extdata\", \"example_vertical_mbMCWtest_data.csv\", package = \"MCWtests\") file.copy(extdata_v, test_temp) #> [1] TRUE extdata_h <- system.file(\"extdata\", \"example_horizontal_mbMCWtest_data.csv\", package = \"MCWtests\") file.copy(extdata_h, test_temp) #> [1] TRUE # running mbMCWtest with an ideal vertical entry dataset path_v <- file.path(test_temp, \"example_vertical_mbMCWtest_data.csv\") mbMCWtest_vertical_results <- mbMCWtest(path_v, 10) #> total number of tests: 2 #> number of exact tests: 0 #> number of approximated tests: 2 #> running approximated tests:  print(mbMCWtest_vertical_results) #> Key: <contrast, matched_condition_a, matched_condition_b, unmatched_condition_x, unmatched_condition_y> #>    contrast matched_condition_a matched_condition_b unmatched_condition_x #>      <char>              <char>              <char>                <char> #> 1:        I                AAAA                BBBB                  XXXX #> 2:        I                AAAA                BBBB                  XXXX #> 3:        I                AAAA                BBBB                  XXXX #> 4:        I                AAAA                BBBB                  XXXX #> 5:       II                AAAA                BBBB                  XXXX #> 6:       II                AAAA                BBBB                  XXXX #> 7:       II                AAAA                BBBB                  XXXX #> 8:       II                AAAA                BBBB                  XXXX #>    unmatched_condition_y     N   N_x   N_y    test_type  BI_type #>                   <char> <int> <int> <int>       <char>   <char> #> 1:                  YYYY    10     5     5 approximated mbMCW_BI #> 2:                  YYYY    10     5     5 approximated mbMCW_BI #> 3:                  YYYY    10     5     5 approximated mbMCW_BI #> 4:                  YYYY    10     5     5 approximated mbMCW_BI #> 5:                  YYYY    10     5     5 approximated mbMCW_BI #> 6:                  YYYY    10     5     5 approximated mbMCW_BI #> 7:                  YYYY    10     5     5 approximated mbMCW_BI #> 8:                  YYYY    10     5     5 approximated mbMCW_BI #>    matched_condition_contrast unmatched_condition_contrast observed_BI #>                        <char>                       <char>       <num> #> 1:                  AAAA-BBBB                    XXXX-YYYY  0.01886792 #> 2:                  AAAA-BBBB                    YYYY-XXXX -0.01886792 #> 3:                  BBBB-AAAA                    XXXX-YYYY -0.01886792 #> 4:                  BBBB-AAAA                    YYYY-XXXX  0.01886792 #> 5:                  AAAA-BBBB                    XXXX-YYYY  0.64705882 #> 6:                  AAAA-BBBB                    YYYY-XXXX -0.64705882 #> 7:                  BBBB-AAAA                    XXXX-YYYY -0.64705882 #> 8:                  BBBB-AAAA                    YYYY-XXXX  0.64705882 #>    expected_by_chance_BI_N pupper plower #>                      <int>  <num>  <num> #> 1:                      10    0.5    0.5 #> 2:                      10    0.5    0.5 #> 3:                      10    0.5    0.5 #> 4:                      10    0.5    0.5 #> 5:                      10    0.0    1.0 #> 6:                      10    1.0    0.0 #> 7:                      10    1.0    0.0 #> 8:                      10    0.0    1.0 # running mbMCWtest with an ideal horizontal entry dataset path_h <- file.path(test_temp, \"example_horizontal_mbMCWtest_data.csv\") mbMCWtest_horizontal_results <- mbMCWtest(path_h, 10) #> total number of tests: 6 #> number of exact tests: 0 #> number of approximated tests: 6 #> running approximated tests:  print(mbMCWtest_horizontal_results) #> Key: <contrast, contrast_trait, element_ID, element_chr, element_start, element_end, matched_condition_a, matched_condition_b, unmatched_condition_x, unmatched_condition_y> #>     contrast contrast_trait element_ID element_chr element_start element_end #>       <char>         <char>     <char>       <int>         <int>       <int> #>  1:        I        trait_a         x1           1          1000        2000 #>  2:        I        trait_a         x1           1          1000        2000 #>  3:        I        trait_a         x1           1          1000        2000 #>  4:        I        trait_a         x1           1          1000        2000 #>  5:        I        trait_a         x2           1          5000        5500 #>  6:        I        trait_a         x2           1          5000        5500 #>  7:        I        trait_a         x2           1          5000        5500 #>  8:        I        trait_a         x2           1          5000        5500 #>  9:        I        trait_a         x3           1         90000      100000 #> 10:        I        trait_a         x3           1         90000      100000 #> 11:        I        trait_a         x3           1         90000      100000 #> 12:        I        trait_a         x3           1         90000      100000 #> 13:       II        trait_b         x1           1          1000        2000 #> 14:       II        trait_b         x1           1          1000        2000 #> 15:       II        trait_b         x1           1          1000        2000 #> 16:       II        trait_b         x1           1          1000        2000 #> 17:       II        trait_b         x2           1          5000        5500 #> 18:       II        trait_b         x2           1          5000        5500 #> 19:       II        trait_b         x2           1          5000        5500 #> 20:       II        trait_b         x2           1          5000        5500 #> 21:       II        trait_b         x3           1         90000      100000 #> 22:       II        trait_b         x3           1         90000      100000 #> 23:       II        trait_b         x3           1         90000      100000 #> 24:       II        trait_b         x3           1         90000      100000 #>     contrast contrast_trait element_ID element_chr element_start element_end #>     matched_condition_a matched_condition_b unmatched_condition_x #>                  <char>              <char>                <char> #>  1:                AAAA                BBBB                  XXXX #>  2:                AAAA                BBBB                  XXXX #>  3:                AAAA                BBBB                  XXXX #>  4:                AAAA                BBBB                  XXXX #>  5:                AAAA                BBBB                  XXXX #>  6:                AAAA                BBBB                  XXXX #>  7:                AAAA                BBBB                  XXXX #>  8:                AAAA                BBBB                  XXXX #>  9:                AAAA                BBBB                  XXXX #> 10:                AAAA                BBBB                  XXXX #> 11:                AAAA                BBBB                  XXXX #> 12:                AAAA                BBBB                  XXXX #> 13:                AAAA                BBBB                  XXXX #> 14:                AAAA                BBBB                  XXXX #> 15:                AAAA                BBBB                  XXXX #> 16:                AAAA                BBBB                  XXXX #> 17:                AAAA                BBBB                  XXXX #> 18:                AAAA                BBBB                  XXXX #> 19:                AAAA                BBBB                  XXXX #> 20:                AAAA                BBBB                  XXXX #> 21:                AAAA                BBBB                  XXXX #> 22:                AAAA                BBBB                  XXXX #> 23:                AAAA                BBBB                  XXXX #> 24:                AAAA                BBBB                  XXXX #>     matched_condition_a matched_condition_b unmatched_condition_x #>     unmatched_condition_y     N   N_x   N_y    test_type  BI_type #>                    <char> <int> <int> <int>       <char>   <char> #>  1:                  YYYY    10     5     5 approximated mbMCW_BI #>  2:                  YYYY    10     5     5 approximated mbMCW_BI #>  3:                  YYYY    10     5     5 approximated mbMCW_BI #>  4:                  YYYY    10     5     5 approximated mbMCW_BI #>  5:                  YYYY    10     5     5 approximated mbMCW_BI #>  6:                  YYYY    10     5     5 approximated mbMCW_BI #>  7:                  YYYY    10     5     5 approximated mbMCW_BI #>  8:                  YYYY    10     5     5 approximated mbMCW_BI #>  9:                  YYYY    10     5     5 approximated mbMCW_BI #> 10:                  YYYY    10     5     5 approximated mbMCW_BI #> 11:                  YYYY    10     5     5 approximated mbMCW_BI #> 12:                  YYYY    10     5     5 approximated mbMCW_BI #> 13:                  YYYY    10     5     5 approximated mbMCW_BI #> 14:                  YYYY    10     5     5 approximated mbMCW_BI #> 15:                  YYYY    10     5     5 approximated mbMCW_BI #> 16:                  YYYY    10     5     5 approximated mbMCW_BI #> 17:                  YYYY    10     5     5 approximated mbMCW_BI #> 18:                  YYYY    10     5     5 approximated mbMCW_BI #> 19:                  YYYY    10     5     5 approximated mbMCW_BI #> 20:                  YYYY    10     5     5 approximated mbMCW_BI #> 21:                  YYYY    10     5     5 approximated mbMCW_BI #> 22:                  YYYY    10     5     5 approximated mbMCW_BI #> 23:                  YYYY    10     5     5 approximated mbMCW_BI #> 24:                  YYYY    10     5     5 approximated mbMCW_BI #>     unmatched_condition_y     N   N_x   N_y    test_type  BI_type #>     matched_condition_contrast unmatched_condition_contrast observed_BI #>                         <char>                       <char>       <num> #>  1:                  AAAA-BBBB                    XXXX-YYYY -0.18181818 #>  2:                  AAAA-BBBB                    YYYY-XXXX  0.18181818 #>  3:                  BBBB-AAAA                    XXXX-YYYY  0.18181818 #>  4:                  BBBB-AAAA                    YYYY-XXXX -0.18181818 #>  5:                  AAAA-BBBB                    XXXX-YYYY -0.18181818 #>  6:                  AAAA-BBBB                    YYYY-XXXX  0.18181818 #>  7:                  BBBB-AAAA                    XXXX-YYYY  0.18181818 #>  8:                  BBBB-AAAA                    YYYY-XXXX -0.18181818 #>  9:                  AAAA-BBBB                    XXXX-YYYY -0.09803922 #> 10:                  AAAA-BBBB                    YYYY-XXXX  0.09803922 #> 11:                  BBBB-AAAA                    XXXX-YYYY  0.09803922 #> 12:                  BBBB-AAAA                    YYYY-XXXX -0.09803922 #> 13:                  AAAA-BBBB                    XXXX-YYYY  0.88888889 #> 14:                  AAAA-BBBB                    YYYY-XXXX -0.88888889 #> 15:                  BBBB-AAAA                    XXXX-YYYY -0.88888889 #> 16:                  BBBB-AAAA                    YYYY-XXXX  0.88888889 #> 17:                  AAAA-BBBB                    XXXX-YYYY  0.41818182 #> 18:                  AAAA-BBBB                    YYYY-XXXX -0.41818182 #> 19:                  BBBB-AAAA                    XXXX-YYYY -0.41818182 #> 20:                  BBBB-AAAA                    YYYY-XXXX  0.41818182 #> 21:                  AAAA-BBBB                    XXXX-YYYY  0.69811321 #> 22:                  AAAA-BBBB                    YYYY-XXXX -0.69811321 #> 23:                  BBBB-AAAA                    XXXX-YYYY -0.69811321 #> 24:                  BBBB-AAAA                    YYYY-XXXX  0.69811321 #>     matched_condition_contrast unmatched_condition_contrast observed_BI #>     expected_by_chance_BI_N pupper plower #>                       <int>  <num>  <num> #>  1:                      10    0.7    0.3 #>  2:                      10    0.3    0.7 #>  3:                      10    0.3    0.7 #>  4:                      10    0.7    0.3 #>  5:                      10    0.8    0.2 #>  6:                      10    0.2    0.8 #>  7:                      10    0.2    0.8 #>  8:                      10    0.8    0.2 #>  9:                      10    0.7    0.3 #> 10:                      10    0.3    0.7 #> 11:                      10    0.3    0.7 #> 12:                      10    0.7    0.3 #> 13:                      10    0.0    1.0 #> 14:                      10    1.0    0.0 #> 15:                      10    1.0    0.0 #> 16:                      10    0.0    1.0 #> 17:                      10    0.0    1.0 #> 18:                      10    1.0    0.0 #> 19:                      10    1.0    0.0 #> 20:                      10    0.0    1.0 #> 21:                      10    0.0    1.0 #> 22:                      10    1.0    0.0 #> 23:                      10    1.0    0.0 #> 24:                      10    0.0    1.0 #>     expected_by_chance_BI_N pupper plower  rm(test_temp)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test — muMCW_approximated_test","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test — muMCW_approximated_test","text":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test — muMCW_approximated_test","text":"","code":"muMCW_approximated_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test — muMCW_approximated_test","text":"x Data muMCW approximated tests provided function muMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test_observed_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Observed Bias Indexes (BIs) — muMCW_approximated_test_observed_BIs","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Observed Bias Indexes (BIs) — muMCW_approximated_test_observed_BIs","text":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Observed Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test_observed_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Observed Bias Indexes (BIs) — muMCW_approximated_test_observed_BIs","text":"","code":"muMCW_approximated_test_observed_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test_observed_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Observed Bias Indexes (BIs) — muMCW_approximated_test_observed_BIs","text":"x Data muMCW approximated tests provided function muMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test_simulated_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Simulated Bias Indexes (BIs) — muMCW_approximated_test_simulated_BIs","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Simulated Bias Indexes (BIs) — muMCW_approximated_test_simulated_BIs","text":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Simulated Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test_simulated_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Simulated Bias Indexes (BIs) — muMCW_approximated_test_simulated_BIs","text":"","code":"muMCW_approximated_test_simulated_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_approximated_test_simulated_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Approximated Test: Simulated Bias Indexes (BIs) — muMCW_approximated_test_simulated_BIs","text":"x Data muMCW approximated tests provided function muMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_exact_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test — muMCW_exact_test","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test — muMCW_exact_test","text":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_exact_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test — muMCW_exact_test","text":"","code":"muMCW_exact_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_exact_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test — muMCW_exact_test","text":"x Data muMCW exact tests provided function muMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_exact_test_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test: Data Combinations — muMCW_exact_test_combinations","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test: Data Combinations — muMCW_exact_test_combinations","text":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test: Data Combinations","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_exact_test_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test: Data Combinations — muMCW_exact_test_combinations","text":"","code":"muMCW_exact_test_combinations(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCW_exact_test_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Pairs Univariate Monte Carlo-Wilcoxon (muMCW) Exact Test: Data Combinations — muMCW_exact_test_combinations","text":"x Data muMCW exact tests provided function muMCW_exact_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCWtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","title":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","text":"muMCW test statistical tool assess whether one set inherently matched-paired measures significantly biased direction. instance, muMCW tests can used analyze bodyweights transcript abundances determined two different timepoints set mice.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCWtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","text":"","code":"muMCWtest(path, max_rearrangements)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCWtest.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","text":"executing muMCWtest function, users must provide path local CSV file named X_muMCWtest_data.csv, X serves user-defined identifier. X_muMCWtest_data.csv can structured two distinct formats: Vertical layout: format allows appending datasets varying structures, different numbers measure matched-pairs appended test. Vertical entry datasets include following columns: Columns condition_a condition_b uniquely identify two conditions matched-paired measures collected. Columns value_a value_b contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain terms condition value. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Horizontal layout: format allows appending datasets similar structures, number matched-paired measures appended test. Horizontal entry datasets include following columns: Columns condition_a condition_b uniquely identify two conditions matched-paired measures collected. Columns .b., represents integers differentiate specific matched-pairs measures, contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain term condition structure .b.columns. columns optional running single test, least one column required running multiple tests simultaneously.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCWtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","text":"path Path local CSV file containing entry dataset formatted muMCW tests. max_rearrangements User-defined maximum number rearrangements dataset used function muMCWtest generate collection expected--chance muMCW_BIs estimate statistical significance observed muMCW_BIs. number distinct dataset rearrangements less max_rearrangements, muMCWtest calculates muMCW_BIs possible data rearrangements. number distinct dataset rearrangements greater max_rearrangements, muMCWtest perform N = max_rearrangements random measure rearrangements calculate collection expected--chance muMCW_BIs.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCWtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","text":"muMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_muMCWtest_results.csv X user-defined identifier entry dataset CSV file. X_muMCWtest_results.csv file contains two rows muMCW test, muMCW_BIs calculated possible condition contrast (e.g., -b b-). X_muMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Columns condition_a condition_b indicate two conditions matched-paired measures provided. Column N indicates total number measure matched-pairs removing matched-pairs missing values (NAs). Column test_type distinguishes exact approximated tests. Column BI_type indicates muMCW_BI. Column condition_contrast indicates condition contrast row results. Column observed_BI contains value muMCW_BIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance muMCW_BIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent P~upper~ P~lower~ values, respectively. denote fraction expected--chance muMCW_BIs values higher equal lower equal observed muMCW_BIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCWtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","text":"function muMCWtest eliminates matched-paired measures least one missing value (NA) proceeding following steps. estimate bias matched-paired measures dataset, function muMCWtest performs following tasks: matched-pair measures, subtracts values two possible condition contrasts (e.g., -b b-). condition contrast, ranks absolute values non-zero differences lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, tied measure pair differences assigned lowest rank possible. assigns measure pair rank sign based sign corresponding measure pair difference. sums signed ranks condition contrast. calculates muMCW_BI dividing sum signed ranks maximum number sum corresponding measure pairs highest possible positive ranks. Consequently, muMCW_BI ranges 1 measures corresponding first condition higher measures corresponding second condition, -1 measures corresponding first condition lower measures corresponding second condition. assess significance muMCW_BIs obtained user-provided dataset (observed muMCW_BIs), function muMCWtest performs following tasks: generates collection expected--chance muMCW_BIs. expected values obtained rearranging measures within two conditions multiple times. user-provided parameter max_rearrangements determines two paths function muMCWtest can follow generate collection expected--chance muMCW_BIs: muMCW exact testing: number distinct measure rearrangements can alter initial pair set distribution less max_rearrangements, function muMCWtest calculates muMCW_BIs possible data rearrangements. muMCW approximated testing: number distinct measure rearrangements can alter initial pair set distribution greater max_rearrangements, function muMCWtest performs N = max_rearrangements random measure rearrangements calculate collection expected--chance muMCW_BIs. calculates P~upper~ P~lower~ values fraction expected--chance muMCW_BIs higher equal lower equal observed muMCW_BIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/muMCWtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matched-Measures Univariate Monte Carlo-Wilcoxon (muMCW) Test — muMCWtest","text":"","code":"test_temp <- tempdir() extdata_v <- system.file(\"extdata\", \"example_vertical_muMCWtest_data.csv\", package = \"MCWtests\") file.copy(extdata_v, test_temp) #> [1] TRUE extdata_h <- system.file(\"extdata\", \"example_horizontal_muMCWtest_data.csv\", package = \"MCWtests\") file.copy(extdata_h, test_temp) #> [1] TRUE # running muMCWtest with an ideal vertical entry dataset path_v <- file.path(test_temp, \"example_vertical_muMCWtest_data.csv\") muMCWtest_vertical_results <- muMCWtest(path_v, 10) #> total number of tests: 2 #> number of exact tests: 0 #> number of approximated tests: 2 #> running approximated tests:  print(muMCWtest_vertical_results) #> Key: <contrast, condition_a, condition_b> #>    contrast condition_a condition_b     N    test_type  BI_type #>      <char>      <char>      <char> <int>       <char>   <char> #> 1:        I        AAAA        BBBB    10 approximated muMCW_BI #> 2:        I        AAAA        BBBB    10 approximated muMCW_BI #> 3:       II        AAAA        BBBB    10 approximated muMCW_BI #> 4:       II        AAAA        BBBB    10 approximated muMCW_BI #>    condition_contrast observed_BI expected_by_chance_BI_N pupper plower #>                <char>       <num>                   <int>  <num>  <num> #> 1:          AAAA-BBBB   0.2181818                      10    0.2    0.8 #> 2:          BBBB-AAAA  -0.2181818                      10    0.8    0.2 #> 3:          AAAA-BBBB  -0.9454545                      10    1.0    0.0 #> 4:          BBBB-AAAA   0.9454545                      10    0.0    1.0 # running muMCWtest with an ideal horizontal entry dataset path_h <- file.path(test_temp, \"example_horizontal_muMCWtest_data.csv\") muMCWtest_horizontal_results <- muMCWtest(path_h, 10) #> total number of tests: 6 #> number of exact tests: 0 #> number of approximated tests: 6 #> running approximated tests:  print(muMCWtest_horizontal_results) #> Key: <contrast, contrast_trait, element_ID, element_chr, element_start, element_end, condition_a, condition_b> #>     contrast contrast_trait element_ID element_chr element_start element_end #>       <char>         <char>     <char>       <int>         <int>       <int> #>  1:        I        trait_a         x1           1          1000        2000 #>  2:        I        trait_a         x1           1          1000        2000 #>  3:        I        trait_a         x2           1          5000        5500 #>  4:        I        trait_a         x2           1          5000        5500 #>  5:        I        trait_a         x3           1         90000      100000 #>  6:        I        trait_a         x3           1         90000      100000 #>  7:       II        trait_b         x1           1          1000        2000 #>  8:       II        trait_b         x1           1          1000        2000 #>  9:       II        trait_b         x2           1          5000        5500 #> 10:       II        trait_b         x2           1          5000        5500 #> 11:       II        trait_b         x3           1         90000      100000 #> 12:       II        trait_b         x3           1         90000      100000 #>     condition_a condition_b     N    test_type  BI_type condition_contrast #>          <char>      <char> <int>       <char>   <char>             <char> #>  1:        AAAA        BBBB     4 approximated muMCW_BI          AAAA-BBBB #>  2:        AAAA        BBBB     4 approximated muMCW_BI          BBBB-AAAA #>  3:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB #>  4:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA #>  5:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB #>  6:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA #>  7:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB #>  8:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA #>  9:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB #> 10:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA #> 11:        AAAA        BBBB     5 approximated muMCW_BI          AAAA-BBBB #> 12:        AAAA        BBBB     5 approximated muMCW_BI          BBBB-AAAA #>     observed_BI expected_by_chance_BI_N pupper plower #>           <num>                   <int>  <num>  <num> #>  1:  0.40000000                      10    0.5    0.6 #>  2: -0.40000000                      10    0.6    0.5 #>  3:  0.06666667                      10    0.7    0.6 #>  4: -0.06666667                      10    0.6    0.7 #>  5:  0.33333333                      10    0.4    0.7 #>  6: -0.33333333                      10    0.7    0.4 #>  7: -1.00000000                      10    1.0    0.1 #>  8:  1.00000000                      10    0.1    1.0 #>  9: -1.00000000                      10    1.0    0.1 #> 10:  1.00000000                      10    0.1    1.0 #> 11: -1.00000000                      10    1.0    0.0 #> 12:  1.00000000                      10    0.0    1.0  rm(test_temp)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test — uMCW_approximated_test","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test — uMCW_approximated_test","text":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test — uMCW_approximated_test","text":"","code":"uMCW_approximated_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test — uMCW_approximated_test","text":"x Data uMCW approximated tests provided function uMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test_observed_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Observed Bias Indexes (BIs) — uMCW_approximated_test_observed_BIs","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Observed Bias Indexes (BIs) — uMCW_approximated_test_observed_BIs","text":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Observed Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test_observed_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Observed Bias Indexes (BIs) — uMCW_approximated_test_observed_BIs","text":"","code":"uMCW_approximated_test_observed_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test_observed_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Observed Bias Indexes (BIs) — uMCW_approximated_test_observed_BIs","text":"x Data uMCW approximated tests provided function uMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test_simulated_BIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Simulated Bias Indexes (BIs) — uMCW_approximated_test_simulated_BIs","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Simulated Bias Indexes (BIs) — uMCW_approximated_test_simulated_BIs","text":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Simulated Bias Indexes (BIs)","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test_simulated_BIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Simulated Bias Indexes (BIs) — uMCW_approximated_test_simulated_BIs","text":"","code":"uMCW_approximated_test_simulated_BIs(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_approximated_test_simulated_BIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Approximated Test: Simulated Bias Indexes (BIs) — uMCW_approximated_test_simulated_BIs","text":"x Data uMCW approximated tests provided function uMCW_approximated_test.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_exact_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Exact Test — uMCW_exact_test","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Exact Test — uMCW_exact_test","text":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Exact Test","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_exact_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Exact Test — uMCW_exact_test","text":"","code":"uMCW_exact_test(x)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCW_exact_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmatched-Pairs Monte Carlo-Wilcoxon (uMCW) Exact Test — uMCW_exact_test","text":"x Data uMCW exact tests provided function uMCWtest.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCWtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","title":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","text":"uMCW test statistical tool assess whether two sets unmatched measures heterogeneity significantly biased direction. Significantly different data heterogeneities two conditions indicate measure analysis constrained relaxed one conditions, potentially providing insights mechanisms underlying variation measure. instance, uMCW tests can used analyze bodyweights transcript abundances determined two sets mice maintained different conditions.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCWtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","text":"","code":"uMCWtest(path, max_rearrangements)"},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCWtest.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","text":"executing uMCWtest function, users must provide path local CSV file named X_uMCWtest_data.csv, X serves user-defined identifier. X_uMCWtest_data.csv can structured two distinct formats: Vertical layout: format allows appending datasets varying structures, different numbers measures per set appended test. Vertical entry datasets include following columns: condition column uniquely identifies two measure sets analysis. value column contains actual measures analysis. many informative columns needed users contextualize results test. names columns include terms condition value. columns optional running single test, least one column required running multiple tests simultaneously. rows individual test must contain information columns. Horizontal layout: format allows appending datasets similar structures, number measures collected two conditions. Horizontal entry datasets include following columns: Columns condition_a condition_b uniquely identify two measure sets analysis. Columns .b.j, j represent integers differentiate specific measures within set, contain actual measures analysis. many informative columns needed users contextualize results test. names columns contain term condition structure .b.j columns. columns optional running single test, least one column required running multiple tests simultaneously.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCWtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","text":"path Path local CSV file containing entry dataset formatted uMCW tests. max_rearrangements User-defined maximum number rearrangements dataset used function uMCWtest generate collection expected--chance uMCW_BIs uMCW_HBIs estimate statistical significance observed uMCW_BIs uMCW_HBIs. number distinct dataset rearrangements less max_rearrangements, uMCWtest calculates uMCW_BIs uMCW_HBIs possible data rearrangements. number distinct dataset rearrangements greater max_rearrangements, uMCWtest perform N = max_rearrangements random measure rearrangements calculate collection expected--chance uMCW_BIs uMCW_HBIs.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCWtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","text":"uMCWtest function reports console total number tests execute, exact approximated counts. also creates CSV file named X_uMCWtest_results.csv, X user-defined identifier entry dataset CSV file. X_uMCWtest_results.csv file contains four rows uMCWtest, two uMCW_BIs calculated condition contrast (e.g., -b b-), two uMCW_HBIs calculated condition contrast. X_uMCWtest_results.csv file includes following columns: User-provided informative columns contextualize results test. Columns condition_a condition_b indicate two measure sets analysis. Columns N, n_a n_b indicate total number measures number measures belonging set removing missing values (NAs). Column test_type distinguishes exact approximated tests. Column BI_type indicates bias index type (uMCW_BI uMCW_HBI) row results. Column condition_contrast indicates set contrast (e.g., -b b-) row results. Column observed_BI contains values uMCW_BIs uMCW_HBIs obtained analyzing user-provided dataset. Column expected_by_chance_BI_N indicates number data rearrangements used calculate expected--chance uMCW_BIs uMCW_HBIs. value corresponds lowest number possible measure rearrangements parameter max_rearrangements. Columns pupper plower represent P~upper~ P~lower~ values, respectively. denote fraction expected--chance uMCW_BIs uMCW_HBIs values higher equal lower equal observed uMCW_BIs uMCW_HBIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCWtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","text":"function uMCWtest eliminate missing values (NAs) dataset proceeding steps. estimate bias two sets measures (e.g., b), function uMCWtest performs tasks: generates possible disjoint data pairs using measures sets. measure pair, subtracts second measure pair first measure pair. ranks absolute values non-zero measure pair differences lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, tied measure pair differences assigned lowest rank possible. assigns measure pair rank sign based sign corresponding measure pair difference. sums signed ranks measure pairs formed measures two different sets (e.g., -b b-). type disjoint set measure pairs (e.g., -b b-), calculates uMCW_BI dividing sum signed ranks maximum number sum corresponding measure pairs highest possible positive ranks. Consequently, uMCW_BI ranges 1 values measures first set higher values measures second set, -1 values measures first set lower values measures second set. estimate bias heterogeneity two sets measures, function uMCWtest performs tasks: generates possible disjoint data pairs within set, disregarding order paired measures. instance, measure pair .1-.2 considered equivalent measure pair .2-.1, former retained subsequent calculations. measure pair, subtracts second measure first measure. ranks measure pair differences non-zero values lowest highest. Measure pair differences value 0 assigned 0 rank. multiple measure pair differences absolute value, uMCWtest assigns tied measure pair differences lowest rank possible. sums ranks measure pairs formed measures set (e.g., -b-b). type -set measure pairs (e.g., -b-b), divides sum signed ranks maximum number sum corresponding measure pairs highest possible ranks. calculates two heterogeneity bias indexes (uMCW_HBIs) subtracting normalized sum signed ranks previous step two possible directions (e.g., -b b-). Consequently, uMCW_HBI ranges 1 least two measures first set distinct values measures second set value, -1 measures first set value least two measures second set distinct values. assess significance uMCW_BIs uMCW_HBIs obtained user-provided data (observed uMCW_BIs uMCW_HBIs), function uMCWtest performs tasks: generates collection expected--chance uMCW_BIs uMCW_HBIs. expected values obtained rearranging measures two sets multiple times. user-provided parameter max_rearrangements determines two paths function uMCWtest can follow generate collection expected--chance uMCW_BIs uMCW_HBIs: uMCW exact testing: number distinct measure rearrangements can alter initial set distribution less max_rearrangements, function uMCWtest calculates uMCW_BIs uMCW_HBIs possible data rearrangements. uMCW approximated testing: number distinct measure rearrangements can alter initial set distribution greater max_rearrangements, function uMCWtest perform N = max_rearrangements random measure rearrangements calculate collection expected--chance uMCW_BIs uMCW_HBIs. calculates P~upper~ P~lower~ values fraction expected--chance uMCW_BIs uMCW_HBIs higher equal lower equal observed uMCW_BIs uMCW_HBIs, respectively.","code":""},{"path":"https://diazcastillo.github.io/MCWtests/reference/uMCWtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unmatched-Measures Monte Carlo-Wilcoxon (uMCW) Test — uMCWtest","text":"","code":"test_temp <- tempdir() extdata_v <- system.file(\"extdata\", \"example_vertical_uMCWtest_data.csv\", package = \"MCWtests\") file.copy(extdata_v, test_temp) #> [1] TRUE extdata_h <- system.file(\"extdata\", \"example_horizontal_uMCWtest_data.csv\", package = \"MCWtests\") file.copy(extdata_h, test_temp) #> [1] TRUE # running uMCWtest with an ideal vertical entry dataset path_v <- file.path(test_temp, \"example_vertical_uMCWtest_data.csv\") uMCWtest_vertical_results <- uMCWtest(path_v, 10) #> total number of tests: 3 #> number of exact tests: 0 #> number of approximated tests: 3 #> running approximated tests:  print(uMCWtest_vertical_results) #> Key: <contrast, condition_a, condition_b> #>     contrast condition_a condition_b     N   n_a   n_b    test_type  BI_type #>       <char>      <char>      <char> <int> <int> <int>       <char>   <char> #>  1:        I        AAAA        BBBB    10     5     5 approximated  uMCW_BI #>  2:        I        AAAA        BBBB    10     5     5 approximated  uMCW_BI #>  3:        I        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>  4:        I        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>  5:       II        AAAA        BBBB    10     5     5 approximated  uMCW_BI #>  6:       II        AAAA        BBBB    10     5     5 approximated  uMCW_BI #>  7:       II        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>  8:       II        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>  9:      III        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 10:      III        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 11:      III        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 12:      III        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>     condition_contrast observed_BI expected_by_chance_BI_N pupper plower #>                 <char>       <num>                   <int>  <num>  <num> #>  1:          AAAA-BBBB  0.03948718                      10    0.1    0.9 #>  2:          BBBB-AAAA -0.03948718                      10    0.9    0.1 #>  3:          AAAA-BBBB -0.02857143                      10    0.2    0.8 #>  4:          BBBB-AAAA  0.02857143                      10    0.8    0.2 #>  5:          AAAA-BBBB -0.69794872                      10    1.0    0.0 #>  6:          BBBB-AAAA  0.69794872                      10    0.0    1.0 #>  7:          AAAA-BBBB -0.07766990                      10    0.7    0.3 #>  8:          BBBB-AAAA  0.07766990                      10    0.3    0.7 #>  9:          AAAA-BBBB -0.68358974                      10    1.0    0.0 #> 10:          BBBB-AAAA  0.68358974                      10    0.0    1.0 #> 11:          AAAA-BBBB  0.39130435                      10    0.0    1.0 #> 12:          BBBB-AAAA -0.39130435                      10    1.0    0.0 # running uMCWtest with an ideal horizontal entry dataset path_h <- file.path(test_temp, \"example_horizontal_uMCWtest_data.csv\") uMCWtest_horizontal_results <- uMCWtest(path_h, 10) #> total number of tests: 9 #> number of exact tests: 0 #> number of approximated tests: 9 #> running approximated tests:  print(uMCWtest_horizontal_results) #> Key: <contrast, contrast_trait, element_ID, element_chr, element_start, element_end, condition_a, condition_b> #>     contrast contrast_trait element_ID element_chr element_start element_end #>       <char>         <char>     <char>       <int>         <int>       <int> #>  1:        I        trait_a         x1           1          1000        2000 #>  2:        I        trait_a         x1           1          1000        2000 #>  3:        I        trait_a         x1           1          1000        2000 #>  4:        I        trait_a         x1           1          1000        2000 #>  5:        I        trait_a         x2           1          5000        5500 #>  6:        I        trait_a         x2           1          5000        5500 #>  7:        I        trait_a         x2           1          5000        5500 #>  8:        I        trait_a         x2           1          5000        5500 #>  9:        I        trait_a         x3           1         90000      100000 #> 10:        I        trait_a         x3           1         90000      100000 #> 11:        I        trait_a         x3           1         90000      100000 #> 12:        I        trait_a         x3           1         90000      100000 #> 13:       II        trait_b         x1           1          1000        2000 #> 14:       II        trait_b         x1           1          1000        2000 #> 15:       II        trait_b         x1           1          1000        2000 #> 16:       II        trait_b         x1           1          1000        2000 #> 17:       II        trait_b         x2           1          5000        5500 #> 18:       II        trait_b         x2           1          5000        5500 #> 19:       II        trait_b         x2           1          5000        5500 #> 20:       II        trait_b         x2           1          5000        5500 #> 21:       II        trait_b         x3           1         90000      100000 #> 22:       II        trait_b         x3           1         90000      100000 #> 23:       II        trait_b         x3           1         90000      100000 #> 24:       II        trait_b         x3           1         90000      100000 #> 25:      III        trait_b         x1           1          1000        2000 #> 26:      III        trait_b         x1           1          1000        2000 #> 27:      III        trait_b         x1           1          1000        2000 #> 28:      III        trait_b         x1           1          1000        2000 #> 29:      III        trait_b         x2           1          5000        5500 #> 30:      III        trait_b         x2           1          5000        5500 #> 31:      III        trait_b         x2           1          5000        5500 #> 32:      III        trait_b         x2           1          5000        5500 #> 33:      III        trait_b         x3           1         90000      100000 #> 34:      III        trait_b         x3           1         90000      100000 #> 35:      III        trait_b         x3           1         90000      100000 #> 36:      III        trait_b         x3           1         90000      100000 #>     contrast contrast_trait element_ID element_chr element_start element_end #>     condition_a condition_b     N   n_a   n_b    test_type  BI_type #>          <char>      <char> <int> <int> <int>       <char>   <char> #>  1:        AAAA        BBBB     9     5     4 approximated  uMCW_BI #>  2:        AAAA        BBBB     9     5     4 approximated  uMCW_BI #>  3:        AAAA        BBBB     9     5     4 approximated uMCW_HBI #>  4:        AAAA        BBBB     9     5     4 approximated uMCW_HBI #>  5:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #>  6:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #>  7:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>  8:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>  9:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 10:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 11:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 12:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 13:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 14:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 15:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 16:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 17:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 18:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 19:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 20:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 21:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 22:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 23:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 24:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 25:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 26:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 27:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 28:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 29:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 30:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 31:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 32:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 33:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 34:        AAAA        BBBB    10     5     5 approximated  uMCW_BI #> 35:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #> 36:        AAAA        BBBB    10     5     5 approximated uMCW_HBI #>     condition_a condition_b     N   n_a   n_b    test_type  BI_type #>     condition_contrast  observed_BI expected_by_chance_BI_N pupper plower #>                 <char>        <num>                   <int>  <num>  <num> #>  1:          AAAA-BBBB  0.500800000                      10    0.2    0.8 #>  2:          BBBB-AAAA -0.500800000                      10    0.8    0.2 #>  3:          AAAA-BBBB  0.402985075                      10    0.1    0.9 #>  4:          BBBB-AAAA -0.402985075                      10    0.9    0.1 #>  5:          AAAA-BBBB -0.066153846                      10    0.4    0.6 #>  6:          BBBB-AAAA  0.066153846                      10    0.6    0.4 #>  7:          AAAA-BBBB  0.064039409                      10    0.2    0.8 #>  8:          BBBB-AAAA -0.064039409                      10    0.8    0.2 #>  9:          AAAA-BBBB  0.161538462                      10    0.2    0.9 #> 10:          BBBB-AAAA -0.161538462                      10    0.9    0.2 #> 11:          AAAA-BBBB -0.043062201                      10    0.6    0.5 #> 12:          BBBB-AAAA  0.043062201                      10    0.5    0.6 #> 13:          AAAA-BBBB -0.649743590                      10    0.9    0.1 #> 14:          BBBB-AAAA  0.649743590                      10    0.1    0.9 #> 15:          AAAA-BBBB  0.024390244                      10    0.2    0.8 #> 16:          BBBB-AAAA -0.024390244                      10    0.8    0.2 #> 17:          AAAA-BBBB -0.778974359                      10    1.0    0.0 #> 18:          BBBB-AAAA  0.778974359                      10    0.0    1.0 #> 19:          AAAA-BBBB -0.123809524                      10    1.0    0.0 #> 20:          BBBB-AAAA  0.123809524                      10    0.0    1.0 #> 21:          AAAA-BBBB -0.801538462                      10    1.0    0.0 #> 22:          BBBB-AAAA  0.801538462                      10    0.0    1.0 #> 23:          AAAA-BBBB  0.009803922                      10    0.3    0.7 #> 24:          BBBB-AAAA -0.009803922                      10    0.7    0.3 #> 25:          AAAA-BBBB -0.807692308                      10    1.0    0.0 #> 26:          BBBB-AAAA  0.807692308                      10    0.0    1.0 #> 27:          AAAA-BBBB  0.303921569                      10    0.0    1.0 #> 28:          BBBB-AAAA -0.303921569                      10    1.0    0.0 #> 29:          AAAA-BBBB -0.558461538                      10    1.0    0.0 #> 30:          BBBB-AAAA  0.558461538                      10    0.0    1.0 #> 31:          AAAA-BBBB  0.288888889                      10    0.1    0.9 #> 32:          BBBB-AAAA -0.288888889                      10    0.9    0.1 #> 33:          AAAA-BBBB -0.576923077                      10    1.0    0.0 #> 34:          BBBB-AAAA  0.576923077                      10    0.0    1.0 #> 35:          AAAA-BBBB  0.527777778                      10    0.1    0.9 #> 36:          BBBB-AAAA -0.527777778                      10    0.9    0.1 #>     condition_contrast  observed_BI expected_by_chance_BI_N pupper plower  rm(test_temp)"},{"path":"https://diazcastillo.github.io/MCWtests/news/index.html","id":"mcwtests-100","dir":"Changelog","previous_headings":"","what":"MCWtests 1.0.0","title":"MCWtests 1.0.0","text":"First feature complete version.","code":""}]
