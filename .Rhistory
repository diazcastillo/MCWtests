scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid (factor(contrast_condition) ~ contrast_sex, scales = "free_y") +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_wrap (contrast_condition ~ contrast_sex, scales = "free_y") +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_wrap (contrast_condition ~ contrast_sex, scales = "free")
View(b)
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_wrap (contrast_tissue ~ contrast_sex, scales = "free")
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)][
, `:=`(significance = fcase(pupper < 0.05, 1, plower < 0.05, -1))][
is.na(significance), `:=`(significance, 0)]
View(b)
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free")
?geom_tile
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "white", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free")
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3"), labels = c("transcriptome", "L1", "L2", "H1", "H2", "H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "white", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free")
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3"), labels = c("whole", "L1", "L2", "H1", "H2", "H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "white", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free") +
geom_point(aes(shape = factor(significance)), size = 3) +
scale_shape_manual(labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "Transcriptome component", y = NULL, fill = "Bias index", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
plot.title = element_text (hjust = 0.5),
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
text = element_text(family = "sans", size = 20, color = "black"))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3"), labels = c("whole", "L1", "L2", "H1", "H2", "H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free") +
geom_point(aes(shape = factor(significance)), size = 3) +
scale_shape_manual(labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "Transcriptome component", y = NULL, fill = "Bias index", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
plot.title = element_text (hjust = 0.5),
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
text = element_text(family = "sans", size = 20, color = "black"))
library(usethis)
use_description(fields = list(Description = "aaaa"))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses).
"))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses).aaa"))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). This package offers the ability to execute four different MCW tests, each with unique data structures and specific questions to address."))
userhi::use_vignette("MCWtests")
usethis::use_vignette("MCWtests")
usethis::use_package("data.table")
usethis::use_package("Zseq")
usethis::use_package("pbapply")
usethis::use_package("ggplot2", "Suggests")
usethis::use_package("DiagrammeR", "Suggests")
usethis::use_package("testthat", "Suggests", min_version = "3.0.0")
use_mit_license()
use_git_config(user.name = "Carlos Diaz-Castillo", user.email = "cdiazcas@ucsc.edu")
use_git_config(core.editor = "emacs")
usethis::git_default_branch_configure()
usethis::create_github_token()
gitcreds::gitcreds_set()
use_git()
use_github()
usethis::use_github()
usethis::use_readme_rmd()
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
MCWtests
?MCWtests
?ggplot2
library(ggplot2)
?ggplot2
devtools::build_readme()
devtools::build_vignettes()
MCWtests
devtools::build_readme()
devtools::build_vignettes()
install.packages("fgsea")
library(devtools)
install_github("ctlab/fgsea")
library(devtools)
install_github("ctlab/fgsea")
library(devtools)
install_github("fgsea")
usethis::use_git()
Initial commit
install.packages("devtools")
devtools::install_github("diazcastillo/MCWtests")
install.packages("devtools")
devtools::install_github("diazcastillo/MCWtests")
?install_github
devtools::install_github("diazcastillo/MCWtests", build_vignettes = TRUE)
devtools::install_github("diazcastillo/MCWtests", build_vignettes = TRUE, force = TRUE)
devtools::install_github("diazcastillo/MCWtests", build_vignettes = TRUE, build_manual = TRUE, force = TRUE)
library(edgeR)
?calcNormFactors
?cpm
library(DESeq2)
?DESeq
?bMCWtest
library(MCWtests)
?bMCWtest
devtools::install_github("diazcastillo/MCWtests")
library(MCWtests)
library(MCWtests)
?bMCWtest
library(data.table)
?bMCWtest
pak::pak("tidyverse/ggplot2")
library(devtools)
?install_github
library(edgeR)
?cpm
y <- matrix(rnbinom(20,size=1,mu=10),5,4)
cpm(y)
?bMCWtest
library(data.table)
path <- system.file("extdata", "bMCWtest_example_data.csv", package = "MCWtests")
path <- system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")
devtools::install_github("diazcastillo/MCWtests")
library(MCWtests)
library(MCWtests)
library(MCWtests)
?bMCWtest
library(data.table )
?bMCWtest
devtools::install_github("diazcastillo/MCWtests")
devtools::install_github("diazcastillo/MCWtests", force = TRUE)
?bMCWtest
library(MCWtests)
library(data.table)
library(MCWtests)
?bMCWtest
?devtools::install_github
devtools::install_github("diazcastillo/MCWtests", force = TRUE, build = TRUE)
library(MCWtests)
?bMCWtest
path <- system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")
path.2 <- system.file("extdata", "example_uMCWtest_data.csv", package = "MCWtests")
path.2 <- system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")
path.2 <- system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")
devtools::install_github("diazcastillo/MCWtests")
devtools::install_github("diazcastillo/MCWtests", force = TRUE)
library(MCWtests)
?bMCWtest
path <- system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")
bMCWtest_results <- bMCWtest(path, 200)
?usethis::use_gpl_license
usethis::use_gpl_license(version= 3, include_future = TRUE)
new <- system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")
testFolder <- tempdir()
file.copy(new, testFolder)
file.copy(c(new), testFolder)
?file.copy
files <- list.files(testFolder, full.names = TRUE)
files
a <- bMCWtest("/var/folders/nl/1d0fxfz9707fpmcd5t56pdqr0000gn/T//RtmpKSm9Va/example_bMCWtest_data.csv", 10)
files <- list.files(testFolder, full.names = TRUE)
files
file.remove(files)
files <- list.files(testFolder, full.names = TRUE)
files
tempdir()
#testthat and example structures
test_folder <- tempdir()
file.copy <- (system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_folder)
file.copy <- (c(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")), test_folder)
file.copy <- (system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"),
file.copy <- (system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests")
test_folder)
file.copy <- (system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"),
#testthat and example structures
test_folder <- tempdir()
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_folder)
test_folder
list.files(test_folder)
bMCWtest("example_bMCWtest_data.csv", 10)
bMCWtest("./example_bMCWtest_data.csv", 10)
a <- bMCWtest("example_bMCWtest_data.csv", 10)
?names
file.path(tempdir(), names("example_bMCWtest_data.csv"))
file.path(tempdir(), names(example_bMCWtest_data.csv))
?file.path
file.path(tempdir(), "example_bMCWtest_data.csv")
bMCWtest(file.path(tempdir(), "example_bMCWtest_data.csv"), 10)
list.file(tempdir())
list.files(test_folder)
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), temp.dir())
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), tempdir())
bMCWtest(file.path(tempdir(), "example_bMCWtest_data.csv"), 10)
list.files(temp.dir())
list.files(tempdir)
list.files(tempdir())
tempdir
file.remove(tempdir(), c("example_bMCWtest_data.csv", "example_bMCWtest_results.csv"))
?file.remove
tempdir
list.files(tempdir())
file.remove(c("example_bMCWtest_data.csv", "example_bMCWtest_results.csv"), showWarnings = FALSE)
list.files(tempdir())
file.remove(c(file.path(tempdir(), "example_bMCWtest_data.csv"),
file.path(tempdir(), "example_bMCWtest_results.csv")))
list.files(tempdir())
tempdir()
test_temp <- tempdir()
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
bMCWtest(file.path(test_temp, "example_bMCWtest_data.csv"), 10)
file.remove(c(file.path(test_temp, "example_bMCWtest_data.csv"),
file.path(test_temp, "example_bMCWtest_results.csv")))
test_temp()
test_temp <- tempdir()
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
path <- file.path(test_temp, "example_bMCWtest_data.csv")
a <- bMCWtest(path, 10)
rm(test_temp)
rm(test_folder)
test_temp <- tempdir()
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
path <- file.path(test_temp, "example_bMCWtest_data.csv")
bMCWtest_results <- bMCWtest(path, 10)
remove(a)
list.files(test_temp())
list.files(test_temp
list.files(test_temp)
?bMCWtest
?bMCWtest
?bMCWtest
test_temp <- tempdir()
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
path <- file.path(test_temp, "example_bMCWtest_data.csv")
bMCWtest_results <- bMCWtest(path, 10)
rm(test_temp)
View(bMCWtest_results)
?bMCWtest
?bMCWtest
?bMCWtest
#testthat and example structures
test_temp <- tempdir()
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
?file.copy
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp, showWarnings = FALSE)
file.copy
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp, copy.mode =  = FALSE)
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp, copy.mode = FALSE)
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp, copy.date =  = FALSE)
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp, copy.date =  FALSE)
?bMCWtest
?mbMCWtest
?mbMCWtest
?mbMCWtest
?mbMCWtest
?mbMCWtest
?bMCWtest
?mbMCWtest
?muMCWtest
?uMCWtest
?muMCWtest
?bMCWtest
?mbMCWtest
?muMCWtest
?uMCWtest
?file.copy
file.copy
#testthat and example structures
test_temp <- tempdir()
file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
invisible(file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp))
#testthat and example structures
test_temp <- tempdir()
invisible(file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp))
?bMCWtest
?mbMCWtest
?muMCWtest
?uMCWtest
usethis::use_testthat()
use_test()
usethis::use_test()
?expect_length
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?exists
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
usethis::use_test()
usethis::use_test()
usethis::use_test()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?readRDS
?withr::local_tempfile
devtools::load_all(".")
?withr::local_tempfile()
devtools::load_all(".")
?bMCWtest
?bMCWtest
?bMCWtest
?readDRS
?readRDS
?withr::local_tempfile()
withr::local_tempfile(bMCWtest(test_path("test_data", "example_bMCWtest_data.csv"), 10))
a <- test_path("test_data", "example_bMCWtest_data.csv")
?withr::local_tempfolder()
?withr::local_tempdir()
a <- withr::local_tempdir()
a
b <- withr::local_tempdir()
b
withr::deferred_run()
path <- withr::local_tempfile(test_path("test_data", "example_bMCWtest_data.csv"))
test_temp <- withr::local_tempdir()
file.copy(test_path("test_data", "example_bMCWtest_data.csv"), test_temp)
#file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
bMCWtest(file.path(test_temp, "example_bMCWtest_data.csv"), 10)
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
test_temp <- withr::local_tempdir()
file.copy(test_path("test_data", "example_bMCWtest_data.csv"), test_temp)
#file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
bMCWtest(file.path(test_temp, "example_bMCWtest_data.csv"), 10)
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
file.path(test_temp, "example_bMCWtest_results.csv")
test_temp
list.files(test_temp)
file.exists(file.path(test_temp, "example_bMCWtest_results.csv"))
?expect_true
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
expect_false(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
test_temp <- withr::local_tempdir()
file.copy(test_path("test_data", "example_bMCWtest_data.csv"), test_temp)
#file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
bMCWtest(file.path(test_temp, "example_bMCWtest_data.csv"), 10)
expect_true(exists(file.path(test_temp, "example_bMCWtest_results.csv")))
list.files(test_temp)
exists(file.path(test_temp, "example_bMCWtest_results.csv"))
file.exists(file.path(test_temp, "example_bMCWtest_results.csv"))
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")) = TRUE)
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")) == TRUE)
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")) == "TRUE")
length("example_bMCWtest_results.csv")
length("1")
length(file.path(test_temp, "example_bMCWtest_results.csv"))
length(list.files(test_temp))
expect_equal(length(list.files(test_temp)), 2)
a <- expect_equal(length(list.files(test_temp)), 2)
expect_equal(length(list.files(test_temp)), 2)
a <- length(list.files(test_temp))
expect_equal(a, 2)
a <- file.exists(file.path(test_temp, "example_bMCWtest_results.csv"))
expect_true(a)
testthat::expect_true(a)
expect(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
expect(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")), "blah")
expect(file.exists("example_bMCWtest_results.csv"), "blah")
expect(!file.exists("example_bMCWtest_results.csv"), "blah")
file.exists("example_bMCWtest_results.csv")
file.exists(file.path(test_temp, "example_bMCWtest_results.csv"))
expect_true(a == "TRUE")
expect_true(a == TRUE)
expect_true(a = TRUE)
expect_true(object = a)
expect_true(2=2)
expect_true(2==2)
expect_true("a")
file.exists("example_bMCWtest_results.csv")
exists("example_bMCWtest_results.csv")
a <- length(list.files(test_temp))
?length
a <- length(list.files(test_temp)) <- value
a <- length(list.files(test_temp), value)
a <- length(list.files(test_temp))
a
expect_equal(a, 2)
?compare_proxy
install.packages("waldo")
test_temp <- withr::local_tempdir()
file.copy(test_path("test_data", "example_bMCWtest_data.csv"), test_temp)
#file.copy(system.file("extdata", "example_bMCWtest_data.csv", package = "MCWtests"), test_temp)
bMCWtest(file.path(test_temp, "example_bMCWtest_data.csv"), 10)
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
expect_true(file.exists(file.path(test_temp, "example_bMCWtest_results.csv")))
devtools::load_all(".")
devtools::load_all(".")
