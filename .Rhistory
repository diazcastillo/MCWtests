values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point(aes(shape = factor(Significance)), size = 3) +
facet_grid(factor(tested_contrast, levels =c("NIC vs W", "iAS vs W", "LC vs NN", "SC vs NN", "NC vs NN")) ~ experiment, scales = "free") +
scale_shape_manual (labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0), limits = rev) +
labs(x = "F0 weeks of age", y = NULL, fill = "Bias index", shape = "Significance") +
guides(shape = guide_legend (override.aes = list (size = 5))) +
theme(panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
panel.spacing.x = unit(2, "lines"),
panel.spacing.y = unit(1, "lines"),
plot.title = element_text (hjust = 0.5),
plot.caption = element_text(face = "bold", hjust = 0),
plot.caption.position = "plot",
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(face = "bold", size = 10),
text = element_text(family = "sans", size = 20, color = "black"))
ggplot(copy(MCW_join_results)[generation == "F1", ], aes(factor(timepoint), factor(trait, levels = c("BW_age", "BW_age_gain"), labels = c("Bodyweight per age [g/days old]", "Bodyweight gain from experiment start per age [g/days old]")))) +
geom_tile(aes(fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn(colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point(aes(shape = factor(Significance)), size = 3) +
ggh4x::facet_nested(factor(tested_contrast, levels =c("NIC vs W", "iAS vs W", "LC vs NN", "SC vs NN", "NC vs NN")) ~ experiment + factor(sex), scales = "free") +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0), limits = rev) +
labs(x = "F1 weeks of age", y = NULL, fill = "Bias index", shape = "Significance") +
guides(shape = guide_legend (override.aes = list (size = 5))) +
theme(panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
panel.spacing.x = unit(2, "lines"),
panel.spacing.y = unit(1, "lines"),
plot.title = element_text (hjust = 0.5),
plot.caption = element_text(face = "bold", hjust = 0),
plot.caption.position = "plot",
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text.y = element_text(face = "bold", size = 10),
text = element_text(family = "sans", size = 20, color = "black"))
ggplot(copy(MCW_join_results)[generation == "F1", ], aes(factor(timepoint), factor(trait, levels = c("BW_age", "BW_age_gain"), labels = c("Bodyweight per age [g/days old]", "Bodyweight gain from experiment start per age [g/days old]")))) +
geom_tile(aes(fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn(colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point(aes(shape = factor(Significance)), size = 3) +
ggh4x::facet_nested(factor(tested_contrast, levels =c("NIC vs W", "iAS vs W", "LC vs NN", "SC vs NN", "NC vs NN")) ~ experiment + factor(sex), scales = "free") +
scale_shape_manual (labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0), limits = rev) +
labs(x = "F1 weeks of age", y = NULL, fill = "Bias index", shape = "Significance") +
guides(shape = guide_legend (override.aes = list (size = 5))) +
theme(panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
panel.spacing.x = unit(2, "lines"),
panel.spacing.y = unit(1, "lines"),
plot.title = element_text (hjust = 0.5),
plot.caption = element_text(face = "bold", hjust = 0),
plot.caption.position = "plot",
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text.y = element_text(face = "bold", size = 10),
text = element_text(family = "sans", size = 20, color = "black"))
ggplot(copy(MCW_join_results)[generation == "F0", ], aes(factor(timepoint), factor(trait, levels = c("BW", "BW_gain", "water", "food"), labels = c("Bodyweight [g]", "Bodyweight gain since start [g]", "Weekly water consumption [mL]", "Weekly food consumption [g]")))) +
geom_tile(aes(fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn(colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point(aes(shape = factor(Significance)), size = 3) +
facet_grid(factor(tested_contrast, levels =c("NIC vs W", "iAS vs W", "LC vs NN", "SC vs NN", "NC vs NN")) ~ experiment, scales = "free") +
scale_shape_manual (labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0), limits = rev) +
labs(x = "F0 weeks of age", y = NULL, fill = "Bias index", shape = "Significance") +
guides(shape = guide_legend (override.aes = list (size = 5))) +
theme(panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
panel.spacing.x = unit(2, "lines"),
panel.spacing.y = unit(1, "lines"),
plot.title = element_text (hjust = 0.5),
plot.caption = element_text(face = "bold", hjust = 0),
plot.caption.position = "plot",
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(face = "bold", size = 10),
text = element_text(family = "sans", size = 20, color = "black"))
ggsave ("/Users/carlosdiazcastillo/Documents/Science/Chamorro-Garcia lab/Grant proposals/Awarded grants/2022 TRDRP/Annual Progress Report/Figure F2.tiff", width = 18, height = 10)
ggplot(copy(MCW_join_results)[generation == "F1", ], aes(factor(timepoint), factor(trait, levels = c("BW_age", "BW_age_gain"), labels = c("Bodyweight per age [g/days old]", "Bodyweight per age gain since start [g/days old]")))) +
geom_tile(aes(fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn(colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point(aes(shape = factor(Significance)), size = 3) +
ggh4x::facet_nested(factor(tested_contrast, levels =c("NIC vs W", "iAS vs W", "LC vs NN", "SC vs NN", "NC vs NN")) ~ experiment + factor(sex), scales = "free") +
scale_shape_manual (labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0), limits = rev) +
labs(x = "F1 weeks of age", y = NULL, fill = "Bias index", shape = "Significance") +
guides(shape = guide_legend (override.aes = list (size = 5))) +
theme(panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
panel.spacing.x = unit(2, "lines"),
panel.spacing.y = unit(1, "lines"),
plot.title = element_text (hjust = 0.5),
plot.caption = element_text(face = "bold", hjust = 0),
plot.caption.position = "plot",
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
strip.text.y = element_text(face = "bold", size = 10),
text = element_text(family = "sans", size = 20, color = "black"))
ggsave ("/Users/carlosdiazcastillo/Documents/Science/Chamorro-Garcia lab/Grant proposals/Awarded grants/2022 TRDRP/Annual Progress Report/Figure F3.tiff", width = 18, height = 10)
library(MCWtests)
GTT_ITT <- mbMCWtest("/Users/carlosdiazcastillo/Documents/Science/Chamorro-Garcia lab/R custom packages/examples/Exp_GTT_ITT_mbMCWtest_data_mbMCWtest_data.csv", 10)
GTT_ITT <- mbMCWtest("/Users/carlosdiazcastillo/Documents/Science/Chamorro-Garcia lab/R custom packages/examples/Exp_GTT_ITT_mbMCWtest_data.csv", 10)
28*4*4
head(GTT_ITT)
GTT_ITT <- mbMCWtest("/Users/carlosdiazcastillo/Documents/Science/Chamorro-Garcia lab/R custom packages/examples/Exp_GTT_ITT_mbMCWtest_data.csv", 10000)
head(GTT_ITT)
if (!require("data.table", quietly = TRUE)) {install.packages("data.table"); library (data.table)}
if (!require("ggplot2", quietly = TRUE)) {install.packages("ggplot2"); library (ggplot2)}
if (!require("vistime", quietly = TRUE)) {install.packages("vistime"); library (vistime)}
if (!require("patchwork", quietly = TRUE)) {install.packages("patchwork"); library (patchwork)}
if (!require("scales", quietly = TRUE)) {install.packages("scales"); library (scales)}
setwd("~/Documents/Science/Chamorro-Garcia lab/Analyses/exp10_transcriptomics")
library(MCWtests)
library(data.table)
exp10_uMCW <- uMCWtest("exp10_normalized counts.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_normalized counts.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_normalized counts.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_normalized counts.csv", 10000)
View(exp10_uMCW)
View(exp10_uMCW)
View(exp10_uMCW)
331260*4
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
ls
exp10_uMCW <- uMCWtest("./exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
ls(.)
list.files()
exp10_uMCW <- ("exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest(exp10_uMCWtest_data.csv, 10000)
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest("./exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest(".exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- bMCWtest(".exp10_bMCWtest_data.csv", 10000)
exp10_bMCW <- bMCWtest("exp10_bMCWtest_data.csv", 10000)
list.files()
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
list.files()
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
View(exp10_uMCW)
head(exp10_uMCW)
a<-copy(exp10_uMCW)[BI_type == "uMCW_BI",]
b<-copy(a)[right(condition_contrast,1)=="W",]
b<-copy(a)[grep("W$", condition_contrast),]
331260*4
fwrite(uMCWtest_results, "uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
fwrite(b, "uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
fwrite(b, "uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
fwrite(b, file = "uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
fwrite(b, file = "exp10_uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
a<-copy(exp10_uMCW)[BI_type == "uMCW_BI",]
b<-copy(a)[grep("W$", condition_contrast),]
fwrite(b, file = "exp10_bMCWtest_results.csv", quote = FALSE, row.names = FALSE)
exp10_bMCW <- bMCWtest("exp10_bMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest("exp10_uMCWtest_data.csv", 10000)
a<-copy(exp10_uMCW)[BI_type == "uMCW_BI",]
b<-copy(a)[grep("W$", condition_contrast),]
fwrite(b, file = "exp10_bMCWtest_results.csv", quote = FALSE, row.names = FALSE)
View(b)
fwrite(b, file = "exp10_uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
531808/4
132952*2
View(a)
b<-copy(a)[seq(1,.N,2)]
fwrite(b, file = "exp10_uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
exp10_bMCW <- bMCWtest("exp10_bMCWtest_data.csv", 10000)
exp10_uMCW <- uMCWtest("./Galaxy isochores/exp10_uMCWtest_data.csv", 10000)
a<-copy(exp10_uMCW)[BI_type == "uMCW_BI",]
b<-copy(a)[seq(1,.N,2)]
fwrite(b, file = "./Galaxy isochores/exp10_uMCWtest_results.csv", quote = FALSE, row.names = FALSE)
exp10_bMCW <- bMCWtest("./Galaxy isochores/exp10_bMCWtest_data.csv", 10000)
exp10_bMCW <- bMCWtest("./Galaxy isochores/exp10_FC_bMCWtest_data.csv", 10000)
library(edgeR)
library(MCWtests)
?uMCWtest
devtools::load_all(".")
?uMCWtest
?uMCWtest
?bMCWtest
?uMCWtest
?uMCWtest
?uMCWtest
?uMCW_exact_test
?uMCW_exact_test
?uMCWtest
?uMCWtest
?muMCWtest
?mbMCWtest
?bMCWtest
a <- bMCWtest("/Users/carlosdiazcastillo/Documents/Science/Chamorro-Garcia lab/Analyses/Stephanie Aguiar/SA_bMCWtest_data.csv", 10)
a <- bMCWtest("/Users/carlosdiazcastillo/Documents/Science/Chamorro-Garcia lab/Analyses/Stephanie Aguiar/SA_bMCWtest_data.csv", 10000)
head (a)
?pmin
b <- copy(a)[, significance := pmin(pupper, plower) * sign(observed_BI)]
library(data.table)
b <- copy(a)[, significance := pmin(pupper, plower) * sign(observed_BI)]
head(b)
View(b)
?fcase
?fifelse
b <- copy(a)[, significance := fcase(pmin(pupper, plower) < 0.05, 1 * sign(observed_BI)]
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1 * sign(observed_BI), "NA"]
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1 * sign(observed_BI), "NA")]
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, (1 * sign(observed_BI)), "NA")]
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, "NA")]
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, ("1" * sign(observed_BI)), "NA")]
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)]
head(b)
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)][significance == 0, significance := "NA"]
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)][significance = 0, significance := "NA"]
head(b)
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)][significance == "0", significance := "NA"]
head(b)
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)][significance == "0", significance := "NA"][, significance := significance * sign(observed_BI)]
head(b)
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue) +
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geomTile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
library(ggplot2)
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geomTile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
library(scales)
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)][, significance := significance * sign(observed_BI)]
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid (contrast_condition ~ contrast_sex, scales = "free_y") +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid (factor(contrast_condition) ~ contrast_sex, scales = "free_y") +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_wrap (contrast_condition ~ contrast_sex, scales = "free_y") +
geom_point (aes (shape = factor (significance), size = factor (significance))) +
scale_size_manual(values=c(6, 6), guide = "none") +
scale_x_discrete (expand = c(0, 0)) +
scale_y_discrete (expand = c(0, 0)) +
scale_shape_manual (labels = c("Pupper < 0.05", "Plower < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "genome set", y = "Tissue", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, size = 0),
plot.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank())
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_tissue)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_wrap (contrast_condition ~ contrast_sex, scales = "free")
View(b)
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black") +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_wrap (contrast_tissue ~ contrast_sex, scales = "free")
b <- copy(a)[, significance := fifelse(pmin(pupper, plower) < 0.05, 1, 0)][
, `:=`(significance = fcase(pupper < 0.05, 1, plower < 0.05, -1))][
is.na(significance), `:=`(significance, 0)]
View(b)
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free")
?geom_tile
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "white", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free")
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3"), labels = c("transcriptome", "L1", "L2", "H1", "H2", "H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "white", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free")
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3"), labels = c("whole", "L1", "L2", "H1", "H2", "H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "white", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free") +
geom_point(aes(shape = factor(significance)), size = 3) +
scale_shape_manual(labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "Transcriptome component", y = NULL, fill = "Bias index", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
plot.title = element_text (hjust = 0.5),
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
text = element_text(family = "sans", size = 20, color = "black"))
ggplot (b, aes(factor (subset_type, level = c("wholeset", "subset_L1", "subset_L2", "subset_H1", "subset_H2", "subset_H3"), labels = c("whole", "L1", "L2", "H1", "H2", "H3")), contrast_condition)) +
geom_tile (aes (fill = observed_BI), colour = "black", size = 0.25) +
scale_fill_gradientn (colours = c("blue", "white", "red"),
values = rescale (c(-1, 0, 1)),
limits = c(-1, 1)) +
facet_grid(contrast_tissue ~ contrast_sex, scales = "free") +
geom_point(aes(shape = factor(significance)), size = 3) +
scale_shape_manual(labels = c("Plower < 0.05", "Pupper < 0.05"), values = c("1" = "\u25B2", "-1" = "\u25BC")) +
labs (x = "Transcriptome component", y = NULL, fill = "Bias index", shape = "Significance") +
guides (shape = guide_legend (override.aes = list (size = 5))) +
theme (panel.background = element_blank(),
panel.border = element_rect (color = "black", fill = NA, linewidth = 0),
plot.title = element_text (hjust = 0.5),
axis.ticks = element_blank(),
axis.text = element_text(size = 20, color = "black"),
legend.key = element_blank(),
strip.background = element_blank(),
text = element_text(family = "sans", size = 20, color = "black"))
library(usethis)
use_description(fields = list(Description = "aaaa"))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses).
"))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses).aaa"))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). Four different MCW tests are available for various types of datasets: unmatched datasets (e.g., bodyweight of two sets of individuals), matched univariate datasets (e.g., bodyweight of one set of individuals at two different timepoints), matched bivariate datasets (e.g., bodyweight of two sets of individuals at two different timepoints), and datasets where the measure under analysis reflects a bias for a quantitative measure between two conditions (e.g., transcript abundance fold change in transcriptomics analyses)."))
use_description(fields = list(Description = "Monte Carlo-Wilcoxon (MCW) tests assess the significance of the difference between two sets of quantitative data by computing the sums of ranks (Wilcoxon) for the dataset under examination before and after repeatedly rearranging it (Monte Carlo). This package offers the ability to execute four different MCW tests, each with unique data structures and specific questions to address."))
userhi::use_vignette("MCWtests")
usethis::use_vignette("MCWtests")
usethis::use_package("data.table")
usethis::use_package("Zseq")
usethis::use_package("pbapply")
usethis::use_package("ggplot2", "Suggests")
usethis::use_package("DiagrammeR", "Suggests")
usethis::use_package("testthat", "Suggests", min_version = "3.0.0")
use_mit_license()
use_git_config(user.name = "Carlos Diaz-Castillo", user.email = "cdiazcas@ucsc.edu")
use_git_config(core.editor = "emacs")
usethis::git_default_branch_configure()
usethis::create_github_token()
gitcreds::gitcreds_set()
use_git()
